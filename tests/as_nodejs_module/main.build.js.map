{"version":3,"sources":["webpack://Atomic/webpack/universalModuleDefinition","webpack://Atomic/webpack/bootstrap","webpack://Atomic/./src/Vector.js","webpack://Atomic/./src/Vertex.js","webpack://Atomic/./src/Constraint.js","webpack://Atomic/./tests/as_nodejs_module/main.js","webpack://Atomic/./src/Collision.js","webpack://Atomic/./src/Body.js","webpack://Atomic/./src/Renderer.js","webpack://Atomic/./src/Atomic.js","webpack://Atomic/./src/app.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector","x","y","dist","v1","v2","sub","add","fromAngle","angle","v","Math","cos","sin","random2D","random","PI","set","arguments","length","sub2","v0","mult","div","mag","sqrt","magSq","setMag","normalize","limit","max","heading","atan2","dx","dy","copy","negative","array","toString","z","unit","subtract","dot","scale","normal","nx","ny","len","squareDist","perp","Vertex","parent","vertex","pinned","opt","position","oldPosition","integrate","pos","oldpos","friction","gravity","boundary","old","vx","canvas","height","groundFriction","width","Constraint","edge","p0","p1","solve","diffrence","adjustX","adjustY","atomic","Atomic","window","innerWidth","randCol","Poly","box","innerHeight","render","fillStyle","triangle","static","init","animate","frame","update","Render","information","showFps","drag","Collision","testAxis","response","relTanVel","tangent","relVel","center","axis","line","depth","SAT","B0","B1","checkAABB","minDistance","Number","MAX_SAFE_INTEGER","n0","edges","project","min","abs","xx","yy","smallestDist","vCount","vertices","halfEx","resolve","o0","o1","vp","vo","rs","lambda","m0","mass","m1","tm","relTv","rt","aabb","bound","minX","maxX","minY","maxY","Body","engine","eCount","positions","undefined","arr","split","svgVertices","compiled","push","constraints","cons","constraint","calculateCenter","a","b","proj","draw","ctx","beginPath","moveTo","lineTo","strokeStyle","stroke","fill","closePath","pointer","isDown","dragVertex","isPointInPath","self","slf","dots","radius","color","PI2","rad","j","hidden","arc","pointIndex","font","fillText","lines","linewidth","showHidden","lineWidth","indexOfBodies","save","bodies","restore","centerOfMass","fillRect","boundingBox","stat","stat2","stat3","Renderer","id","simIteration","document","querySelector","getContext","constraintIterations","collisionIteration","collision","addEventListener","e","offsetX","offsetY","w","h","n1","n2","n3","0","1","2","circle","segs","tmpV","tmpC","index","outer","inner","addVertex","addConstraint","func","clear","requestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","clearRect","createPoly","vert","bvert","centerVertex","updateConstraints","updateBoundary","updateCollision","b0","b1","fpsScope","fps","bar_vx","lastframe","fpsBars","option","updateSpeed","date","Date","valueOf","delta","toFixed","barsColor","shift","strokeRect","fontColor"],"mappings":"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","file":"main.build.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Atomic\"] = factory();\n\telse\n\t\troot[\"Atomic\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/**\r\n * Vector.js v1.0.0\r\n * @author Anurag Hazra\r\n * @borrows p5.Vector\r\n * @param {number} x \r\n * @param {number} y \r\n */\r\nfunction Vector(x, y) {\r\n  this.x = x || 0;\r\n  this.y = y || 0;\r\n}\r\n\r\n// Static Functions\r\nVector.dist = function (v1, v2) {\r\n  return v1.dist(v2);\r\n}\r\nVector.sub = function (v1, v2) {\r\n  return new Vector(v1.x - v2.x, v1.y - v2.y);\r\n};\r\nVector.add = function (v1, v2) {\r\n  return new Vector(v1.x + v2.x, v1.y + v2.y);\r\n};\r\nVector.fromAngle = function (angle) {\r\n  let v = new Vector(0, 0);\r\n  v.x = Math.cos(angle);\r\n  v.y = Math.sin(angle);\r\n  return v;\r\n}\r\nVector.random2D = function (v) {\r\n  return Vector.fromAngle(Math.random() * Math.PI * 180);\r\n}\r\n\r\nVector.prototype = {\r\n  set: function(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  },\r\n  add: function (x, y) {\r\n    if (arguments.length === 1) {\r\n      this.x += x.x;\r\n      this.y += x.y;\r\n    } else if (arguments.length === 2) {\r\n      this.x += x;\r\n      this.y += y;\r\n    }\r\n    return this;\r\n  },\r\n  sub: function (x, y) {\r\n    if (x instanceof Vector) {\r\n      this.x -= x.x;\r\n      this.y -= x.y;\r\n    } else {\r\n      this.x -= x;\r\n      this.y -= y;\r\n    }\r\n    return this;\r\n  },\r\n  sub2 : function(v0, v1) {\r\n    this.x = v0.x - v1.x;\r\n    this.y = v0.y - v1.y;\r\n    return this;\r\n  },\r\n  mult: function (v) {\r\n    if (typeof v === 'number') {\r\n      this.x *= v;\r\n      this.y *= v;\r\n    } else {\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n    }\r\n    return this;\r\n  },\r\n  div: function (v) {\r\n    if (typeof v === 'number') {\r\n      this.x /= v;\r\n      this.y /= v;\r\n    } else {\r\n      this.x /= v.x;\r\n      this.y /= v.y;\r\n    }\r\n    return this;\r\n  },\r\n  mag: function () {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  },\r\n  magSq: function () {\r\n    return (this.x * this.x + this.y * this.y);\r\n  },\r\n  setMag: function (value) {\r\n    this.normalize();\r\n    this.mult(value);\r\n    return this;\r\n  },\r\n  normalize: function () {\r\n    let m = this.mag();\r\n    if (m > 0) {\r\n      this.div(m);\r\n    }\r\n    return this;\r\n  },\r\n  limit: function (max) {\r\n    if (this.mag() > max) {\r\n      this.normalize();\r\n      this.mult(max);\r\n    }\r\n    return this;\r\n  },\r\n  heading: function () {\r\n    return (-Math.atan2(-this.y, this.x));\r\n  },\r\n  dist: function (v) {\r\n    let dx = this.x - v.x;\r\n    let dy = this.y - v.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n  copy: function () {\r\n    return new Vector(this.x, this.y);\r\n  },\r\n  negative: function () {\r\n    this.x = -this.x;\r\n    this.y = -this.y;\r\n    return this;\r\n  },\r\n  array: function () {\r\n    return [this.x, this.y];\r\n  },\r\n  toString: function () {\r\n    return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \"]\";\r\n  },\r\n  unit: function() {\r\n    return this.div(this.mag());\r\n  },\r\n  subtract: function(v) {\r\n    return new Vector(this.x - v, this.y - v);\r\n  },\r\n  dot: function(v) {\r\n    return this.x * v.x + this.y * v.y;\r\n  },\r\n  scale: function(v, s) {\r\n    this.x = v.x * s;\r\n    this.y = v.y * s;\r\n    return this;\r\n  },\r\n  normal: function(v0, v1) {\r\n    // perpendicular\r\n    var nx = v0.y - v1.y,\r\n      ny = v1.x - v0.x;\r\n    // normalize\r\n    var len = 1.0 / Math.sqrt(nx * nx + ny * ny);\r\n    this.x = nx * len;\r\n    this.y = ny * len;\r\n    return this;\r\n  },\r\n  copy: function(v) {\r\n    this.x = v.x;\r\n    this.y = v.y;\r\n    return this;\r\n  },\r\n  squareDist: function(v) {\r\n    var dx = this.x - v.x;\r\n    var dy = this.y - v.y;\r\n    return (dx * dx + dy * dy);\r\n  },\r\n  perp: function(v) {\r\n    this.x = -v.y;\r\n    this.y = v.x;\r\n    return this;\r\n  },\r\n}\r\n\r\nmodule.exports = Vector;","const Vector = require('./Vector');\r\n\r\n/**\r\n * @class Vertex\r\n * @param {*} parent \r\n * @param {*} vertex \r\n * @param {*} pinned \r\n */\r\nfunction Vertex(parent, vertex, pinned, opt) {\r\n  this.opt = opt;\r\n  this.parent = parent;\r\n  this.position = new Vector(vertex.x, vertex.y);\r\n  this.oldPosition = new Vector(vertex.x, vertex.y);\r\n  this.pinned = pinned;\r\n};\r\n\r\n/**\r\n * @method Vertex.integrate()\r\n * Loop and update physics\r\n */\r\nVertex.prototype.integrate = function () {\r\n  if (!this.pinned) {\r\n    let pos = this.position;\r\n    let oldpos = this.oldPosition;\r\n    let x = pos.x;\r\n    let y = pos.y;\r\n\r\n    pos.x += (pos.x - oldpos.x) * this.opt.friction;\r\n    pos.y += (pos.y - oldpos.y) * this.opt.friction + this.opt.gravity;\r\n    oldpos.set(x, y);\r\n  }\r\n};\r\n\r\n/**\r\n * @method Vertex.boundary()\r\n * Handle Boundry Collision\r\n */\r\nVertex.prototype.boundary = function () {\r\n  let pos = this.position,\r\n      old = this.oldPosition;\r\n  let vx = (pos.x - old.x);\r\n  let vy = (pos.y - old.y);\r\n\r\n  // Y\r\n  if (pos.y < 0) {\r\n    pos.y = 0;\r\n  } else if (pos.y > this.opt.canvas.height) {\r\n    pos.x -= (pos.y - this.opt.canvas.height) * vx * this.opt.groundFriction;\r\n    pos.y = this.opt.canvas.height;\r\n  }\r\n\r\n  // X\r\n  if (pos.x < 0) {\r\n    pos.x = 0\r\n  } else if (pos.x > this.opt.canvas.width) {\r\n    pos.x = this.opt.canvas.width\r\n  };\r\n}\r\n\r\nmodule.exports = Vertex;\r\n","/**\r\n * @class Constraint\r\n * @param {*} parent \r\n * @param {*} v0 \r\n * @param {*} v1 \r\n * @param {*} edge \r\n */\r\nfunction Constraint(parent, v0, v1, edge) {\r\n  this.parent = parent;\r\n  this.v0 = v0;\r\n  this.v1 = v1;\r\n  this.p0 = v0.position;\r\n  this.p1 = v1.position;\r\n  this.edge = edge;\r\n  this.dist = Math.sqrt(this.p0.squareDist(this.p1));\r\n};\r\n\r\n\r\n/**\r\n * @method Constraint.solve()\r\n * Solve Constrints\r\n */\r\nConstraint.prototype.solve = function () {\r\n  let dx = this.p1.x - this.p0.x;\r\n  let dy = this.p1.y - this.p0.y;\r\n  let d = Math.sqrt(dx * dx + dy * dy);\r\n\r\n  // using square root approximation\r\n\r\n  // let delta = this.dist / (dx * dx + dy * dy + this.dist) - 0.5;\r\n  // dx *= delta;\r\n  // dy *= delta;\r\n  // // console.log(this.v0)\r\n  // if (!this.v0.pinned) {\r\n  //   this.p0.x -= dx;\r\n  //   this.p0.y -= dy;\r\n  // }\r\n  // if (!this.v1.pinned) {\r\n  //   this.p1.x += dx;\r\n  //   this.p1.y += dy;\r\n  // }\r\n\r\n  const diffrence = (d - this.dist) / d;\r\n  const adjustX = (dx * 0.5 * diffrence) /*stfns*/;\r\n  const adjustY = (dy * 0.5 * diffrence) /*stfns*/;\r\n\r\n  this.p0.x += adjustX;\r\n  this.p0.y += adjustY;\r\n  this.p1.x -= adjustX;\r\n  this.p1.y -= adjustY;\r\n}\r\n\r\nmodule.exports = Constraint;","// const Atomic = require('../../dist/atomic.build');\r\n\r\nconst atomic = new Atomic('#c', window.innerWidth, 450, 0, 1, 50);\r\n\r\n// setup init\r\nfunction init() {\r\n\r\n  for (let i = 0; i < 100; i++) {\r\n    let randCol = 'hsl(' + Math.random() * 360 + 'deg, 50%,50%)';\r\n\r\n    atomic.Poly.box(Math.random() * window.innerWidth, Math.random() * window.innerHeight, 30, 30, {\r\n      render: { fillStyle: randCol }\r\n    });\r\n\r\n  }\r\n\r\n  // atomic.Poly.circle(Math.random() * atomic.width, 300, 40, 24, 1);\r\n  atomic.Poly.triangle(atomic.canvas.width - 550, 300, 100, 100, {\r\n    static: true,\r\n    render: {\r\n      fillStyle: 'green',\r\n      // strokeStyle : 'blue',\r\n      // lineWidth : 4\r\n    }\r\n  });\r\n  atomic.Poly.triangle(atomic.canvas.width - 400, 300, 100, 100, {\r\n    static: true,\r\n    render: {\r\n      fillStyle: 'red'\r\n    }\r\n  });\r\n\r\n  atomic.Poly.box(300, 200, 200, 20, {\r\n    static: true,\r\n    render: { fillStyle: 'red' }\r\n  });\r\n}\r\ninit();\r\n\r\n// animate loop\r\nfunction animate() {\r\n  atomic.frame(animate);\r\n\r\n  atomic.update();\r\n  atomic.render();\r\n  atomic.Render.information();\r\n  atomic.showFps({x:atomic.canvas.width-100});\r\n\r\n  atomic.drag();\r\n}\r\nanimate();","const Vector = require('./Vector');\r\n\r\n/**\r\n * @class Collision\r\n * Collision Detection Class\r\n */\r\nfunction Collision() {\r\n  this.testAxis = new Vector(0, 0);\r\n  this.response = new Vector(0, 0);\r\n  this.relTanVel = new Vector(0, 0);\r\n  this.tangent = new Vector(0, 0);\r\n  this.relVel = new Vector(0, 0);\r\n  this.center = new Vector(0, 0);\r\n  this.axis = new Vector(0, 0);\r\n  this.line = new Vector(0, 0);\r\n  this.depth = 0;\r\n  this.edge = null;\r\n  this.vertex = null;\r\n}\r\n\r\n/**\r\n * SAT Collision Detection\r\n * @method Collision.SAT\r\n * @param {Body} B0\r\n * @param {Body} B1\r\n */\r\nCollision.prototype.SAT = function (B0, B1) {\r\n  // no aabb overlap performance optimization\r\n  this.checkAABB(B1, B0);\r\n  \r\n  let minDistance = Number.MAX_SAFE_INTEGER;\r\n  const n0 = B0.edges.length;\r\n  const n1 = B1.edges.length;\r\n\r\n  // Iterate through all of the edges of both bodies\r\n  for (let i = 0, n = n0 + n1; i < n; i++) {\r\n    // get edge\r\n    let edge = i < n0 ? B0.edges[i] : B1.edges[i - n0];\r\n\r\n    \r\n    // Calculate the perpendicular to this edge and normalize it\r\n    this.testAxis.normal(edge.p0, edge.p1);\r\n\r\n    // Project both bodies onto the normal\r\n    B0.project(this.testAxis);\r\n    B1.project(this.testAxis);\r\n\r\n    //Calculate the distance between the two intervals\r\n    const dist = B0.min < B1.min ? B1.min - B0.max : B0.min - B1.max;\r\n\r\n    // If the intervals don't overlap, return, since there is no collision\r\n    if (dist > 0) {\r\n      return false;\r\n    } else if (Math.abs(dist) < minDistance) {\r\n      // Save collision information\r\n      minDistance = Math.abs(dist);\r\n      this.axis.copy(this.testAxis);\r\n      this.edge = edge;\r\n    }\r\n  }\r\n\r\n  // save penetration depth\r\n  this.depth = minDistance;\r\n\r\n  // Ensure collision edge in B1 and collision vertex in B0\r\n  // console.log(this.edge.parent)\r\n  if (this.edge.parent != B1) {\r\n    const t = B1;\r\n    B1 = B0;\r\n    B0 = t;\r\n  }\r\n\r\n  // Make sure that the collision normal is pointing at B1\r\n  // let n = this.center.sub2(B0.center, B1.center).dot(this.axis);\r\n  const xx = B0.center.x - B1.center.x;\r\n  const yy = B0.center.y - B1.center.y;\r\n  const n = this.axis.x * xx + this.axis.y * yy;\r\n\r\n\r\n  // Revert the collision normal if it points away from B1\r\n  if (n < 0) {\r\n    this.axis.negative()\r\n  }\r\n\r\n  let smallestDist = Number.MAX_SAFE_INTEGER, v, dist;\r\n  for (let i = 0; i < B0.vCount; i++) {\r\n    // Measure the distance of the vertex from the line using the line equation\r\n    v = B0.vertices[i];\r\n    this.line.sub2(v.position, B1.center);\r\n    dist = this.axis.dot(this.line);\r\n    // Set the smallest distance and the collision vertex\r\n    if (dist < smallestDist) {\r\n      smallestDist = dist;\r\n      this.vertex = v;\r\n    }\r\n  }\r\n\r\n  // There is no separating axis. Report a collision!\r\n  return true;\r\n}\r\n\r\nCollision.prototype.checkAABB = function(B1, B0) {\r\n  if (\r\n    !(0 > Math.abs(B1.center.x - B0.center.x) - (B1.halfEx.x + B0.halfEx.x) &&\r\n      0 > Math.abs(B1.center.y - B0.center.y) - (B1.halfEx.y + B0.halfEx.y))\r\n  ) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Resolve Collision based on SAT Given Collision Information\r\n * @method Collision.resolve()\r\n * @param {float} friction\r\n */\r\nCollision.prototype.resolve = function (friction) {\r\n  // cache vertices positions\r\n  let p0 = this.edge.p0,\r\n    p1 = this.edge.p1,\r\n    o0 = this.edge.v0.oldPosition,\r\n    o1 = this.edge.v1.oldPosition,\r\n    vp = this.vertex.position,\r\n    vo = this.vertex.oldPosition,\r\n    rs = this.response;\r\n\r\n  this.response.scale(this.axis, this.depth);\r\n\r\n\r\n  // calculate where on the edge the collision vertex lies\r\n  let t = Math.abs(p0.x - p1.x) > Math.abs(p0.y - p1.y)\r\n    ? (vp.x - rs.x - p0.x) / (p1.x - p0.x)\r\n    : (vp.y - rs.y - p0.y) / (p1.y - p0.y);\r\n  // lambda math\r\n  let lambda = 1 / (t * t + (1 - t) * (1 - t));\r\n\r\n  // calculate mass\r\n  let m0 = this.vertex.parent.mass,\r\n      m1 = this.edge.parent.mass,\r\n      tm = m0 + m1;\r\n\r\n  m0 = m0 / tm;\r\n  m1 = m1 / tm;\r\n\r\n  // apply the collision response\r\n  p0.x -= rs.x * (1 - t) * lambda * m0;\r\n  p0.y -= rs.y * (1 - t) * lambda * m0;\r\n  p1.x -= rs.x * t * lambda * m0;\r\n  p1.y -= rs.y * t * lambda * m0;\r\n  vp.x += rs.x * m1;\r\n  vp.y += rs.y * m1;\r\n\r\n\r\n  //\r\n  // collision friction\r\n  //\r\n\r\n  // compute relative velocity\r\n  this.relVel.set(\r\n    vp.x - vo.x - (p0.x + p1.x - o0.x - o1.x) * 0.5,\r\n    vp.y - vo.y - (p0.y + p1.y - o0.y - o1.y) * 0.5\r\n  );\r\n\r\n  // axis perpendicular\r\n  this.tangent.perp(this.axis);\r\n\r\n  // // project the relative velocity onto tangent\r\n  let relTv = this.relVel.dot(this.tangent);\r\n  let rt = this.relTanVel.set(this.tangent.x * relTv, this.tangent.y * relTv);\r\n\r\n  // // apply tangent friction\r\n  let groundf = 0.95;\r\n  vo.x += rt.x * groundf * m1;\r\n  vo.y += rt.y * groundf * m1;\r\n\r\n  o0.x -= rt.x * (1 - t) * groundf * lambda * m0;\r\n  o0.y -= rt.y * (1 - t) * groundf * lambda * m0;\r\n  o1.x -= rt.x * t * groundf * lambda * m0;\r\n  o1.y -= rt.y * t * groundf * lambda * m0;\r\n\r\n}\r\n\r\nCollision.prototype.aabb = function (B0, B1) {\r\n  return (B0.bound.minX <= B1.bound.maxX) &&\r\n         (B0.bound.minY <= B1.bound.maxY) && \r\n         (B0.bound.maxX >= B1.bound.minX) && \r\n         (B1.bound.maxY >= B0.bound.minY);\r\n}\r\n\r\nmodule.exports = Collision;\r\n","const Vector = require('./Vector');\r\nconst Constraint = require('./Constraint');\r\nconst Vertex = require('./Vertex');\r\n\r\n/**\r\n * @class Body\r\n * @constructor Body\r\n * @param {object} opt \r\n */\r\nfunction Body(opt, engine) {\r\n  this.vCount = 0;\r\n  this.eCount = 0;\r\n  this.min = 0;\r\n  this.max = 0;\r\n  this.vertices = [];\r\n  this.positions = [];\r\n  this.edges = [];\r\n  this.bound = {};\r\n  this.center = new Vector(0, 0);\r\n  this.halfEx = new Vector(0, 0);\r\n  this.engine = engine;\r\n\r\n  this.render = opt.render || { fillStyle: 'black' };\r\n  this.mass = (opt.mass == undefined) ? 1 : opt.mass;\r\n  this.static = (opt.static || false);\r\n  this.angle = opt.angle || 0;\r\n\r\n  if (this.static) {\r\n    this.mass = Number.MAX_SAFE_INTEGER;\r\n  }\r\n\r\n  // SVG POLYGON\r\n  // loop through opt.vertices and add them to array\r\n  if (typeof opt.vertices === 'string') {\r\n    let arr = opt.vertices.split(' ');\r\n    let svgVertices = {};\r\n    for (let i = 0; i < arr.length; i++) {\r\n      svgVertices[i] = { x: Number(arr[i].split(',')[0]), y: Number(arr[i].split(',')[1]) }\r\n    }\r\n    // opt.svgVertices = arr;\r\n    opt.vertices = svgVertices;\r\n  }\r\n\r\n\r\n  // VERTICES\r\n  for (let n in opt.vertices) {\r\n    let vertex = new Vertex(this, opt.vertices[n], this.static, {\r\n      friction: this.engine.friction,\r\n      gravity: this.engine.gravity,\r\n      canvas: this.engine.canvas,\r\n      groundFriction : this.engine.groundFriction\r\n    });\r\n    opt.vertices[n].compiled = vertex;\r\n    this.vertices.push(vertex);\r\n    this.positions.push(vertex.position);\r\n    this.engine.vertices.push(vertex);\r\n    this.vCount++;\r\n  }\r\n\r\n  // CONSTRAINTS\r\n  // loop through opt.constraints and add them to array\r\n  for (let i = 0; i < opt.constraints.length; i++) {\r\n    let cons = opt.constraints[i];\r\n\r\n    let constraint = new Constraint(\r\n      this, //parent\r\n      opt.vertices[cons[0]].compiled, // v0\r\n      opt.vertices[cons[1]].compiled, // v1\r\n      (cons[2] || false)\r\n    );\r\n\r\n    if (constraint.edge) {\r\n      this.edges.push(constraint);\r\n      this.eCount++;\r\n    }\r\n    this.engine.constraints.push(constraint);\r\n  }\r\n\r\n  if (this.angle !== 0) {\r\n    // this.vertices.push(vertex);\r\n    // this.positions.push(vertex.position);\r\n    // this.engine.vertices.push(vertex);\r\n    // this.vCount++;\r\n    for (let i = 0; i < this.vertices.length; i++) {\r\n      let angle = this.angle / 180 * Math.PI;\r\n      this.calculateCenter();\r\n      this.vertices[i].position.x = (this.vertices[i].position.x * Math.cos(angle)) - (this.vertices[i].position.y * Math.sin(angle));\r\n      this.vertices[i].position.y = (this.vertices[i].position.x * Math.sin(angle)) + (this.vertices[i].position.y * Math.cos(angle));\r\n      this.vertices[i].oldPosition.x = this.vertices[i].position.x;\r\n      this.vertices[i].oldPosition.y = this.vertices[i].position.y;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @method Body.calculateCenter()\r\n * calculateCenter and bounding box\r\n */\r\nBody.prototype.calculateCenter = function () {\r\n  let minX = Number.MAX_SAFE_INTEGER,\r\n      minY = Number.MAX_SAFE_INTEGER,\r\n      maxX = -Number.MAX_SAFE_INTEGER,\r\n      maxY = -Number.MAX_SAFE_INTEGER;\r\n\r\n  for (let i = 0; i < this.vertices.length; i++) {\r\n    let p = this.positions[i];\r\n\r\n    if (p.x > maxX) maxX = p.x;\r\n    if (p.y > maxY) maxY = p.y;\r\n    if (p.x < minX) minX = p.x;\r\n    if (p.y < minY) minY = p.y;\r\n  }\r\n\r\n  // center\r\n  this.center.set( (minX + maxX) * 0.5, (minY + maxY) * 0.5 );\r\n\r\n  // half extents\r\n  this.halfEx.set((maxX - minX) * 0.5, (maxY - minY) * 0.5);\r\n\r\n  this.bound = { minX, minY, maxX, maxY };\r\n};\r\n\r\n/**\r\n * get the vector projection on to normal (n)\r\n * @method Body.Project()\r\n * @param {vector} n\r\n */\r\nBody.prototype.project = function (n) {\r\n  function dot(a, b) {\r\n    return a.x * b.x + a.y * b.y;\r\n  }\r\n  // setup a starting value\r\n  let proj = dot(this.vertices[0].position, n);\r\n  let min = max = proj;\r\n\r\n  for (let i = 0; i < this.vertices.length; i++) {\r\n    let p = this.vertices[i].position;\r\n    //project onto each axis\r\n    proj = dot(p, n);\r\n    if (proj < min) { min = proj }\r\n    if (proj > max) { max = proj }\r\n  }\r\n  this.min = min;\r\n  this.max = max\r\n};\r\n\r\n/**\r\n * draw body\r\n * @method Body.draw()\r\n * @param {*} ctx \r\n */\r\nBody.prototype.draw = function () {\r\n  this.engine.ctx.beginPath();\r\n  let p = this.edges[0].p0;\r\n\r\n  for (let i in this.render) {\r\n    if (this.render.hasOwnProperty(i)) {\r\n      this.engine.ctx[i] = this.render[i];\r\n    }\r\n  }\r\n\r\n  this.engine.ctx.fillStyle = this.render.fillStyle;\r\n\r\n  this.engine.ctx.moveTo(p.x, p.y);\r\n  for (let i = 1; i < this.edges.length; i++) {\r\n    p = this.edges[i].p0;\r\n    this.engine.ctx.lineTo(p.x, p.y);\r\n  }\r\n\r\n  if (this.render.strokeStyle) { this.engine.ctx.stroke() };\r\n  this.engine.ctx.fill();\r\n  this.engine.ctx.closePath();\r\n};\r\n\r\n/**\r\n * @method Body.drag()\r\n */\r\nBody.prototype.drag = function () {\r\n  // drag\r\n  if (this.engine.pointer.isDown && !this.engine.dragVertex) {\r\n    if (this.engine.ctx.isPointInPath(this.engine.pointer.x, this.engine.pointer.y)) {\r\n      let minDistance = 99999;\r\n\r\n      for (let i = 0; i < this.engine.vertices.length; i++) {\r\n        let dist = this.engine.vertices[i].position.squareDist(this.engine.pointer);\r\n\r\n        if (dist < minDistance) {\r\n          this.engine.dragVertex = this.engine.vertices[i];\r\n          minDistance = dist;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (this.engine.pointer.isDown === false) {\r\n    this.engine.dragVertex = null;\r\n  }\r\n}\r\n\r\nmodule.exports = Body;","module.exports = {\r\n  self: null,\r\n  create: function (slf) {\r\n    this.self = slf;\r\n    return this;\r\n  },\r\n  /**\r\n   * @method Atomic.Render.dots()\r\n   * @param {number} radius\r\n   * @param {string} color\r\n   */\r\n  dots: function (radius, color) {\r\n    let PI2 = Math.PI * 2;\r\n    let rad = radius || 4;\r\n    for (let i = 0, j = this.self.vertices.length; i < j; i++) {\r\n      let p = this.self.vertices[i].position;\r\n      if (!p.hidden) {\r\n        let fill = (p.color || color || 'black');\r\n        this.self.ctx.beginPath();\r\n        this.self.ctx.fillStyle = fill;\r\n        this.self.ctx.arc(p.x, p.y, rad, 0, PI2);\r\n        this.self.ctx.fill();\r\n        this.self.ctx.closePath();\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.pointIndex()\r\n   * @param {string} font\r\n   * @param {stirng} color\r\n   */\r\n  pointIndex: function (font, color) {\r\n    this.self.ctx.font = font || '10px Arial';\r\n    this.self.ctx.fillStyle = color || 'black';\r\n    for (let i = 0; i < this.self.vertices.length; i++) {\r\n      let p = this.self.vertices[i].position;\r\n      this.self.ctx.fillText(i, (p.x - 5), (p.y - 5));\r\n    }\r\n    this.self.ctx.fill();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.lines()\r\n   * @param {number} linewidth\r\n   * @param {string} color\r\n   * @param {boolean} showHidden\r\n   */\r\n  lines: function (linewidth, color, showHidden) {\r\n    if (!showHidden) { showHidden = false; }\r\n    if (this.self.constraints.length > 0) {\r\n      this.self.ctx.beginPath();\r\n      this.self.ctx.strokeStyle = (color || 'black');\r\n      this.self.ctx.lineWidth = linewidth || 1;\r\n      for (let i = 0; i < this.self.constraints.length; i++) {\r\n        let c = this.self.constraints[i];\r\n        if (!c.hidden) {\r\n          this.self.ctx.moveTo(c.p0.x, c.p0.y);\r\n          this.self.ctx.lineTo(c.p1.x, c.p1.y);\r\n        }\r\n        if (showHidden === true) {\r\n          if (c.hidden) {\r\n            this.self.ctx.moveTo(c.p0.x, c.p0.y);\r\n            this.self.ctx.lineTo(c.p1.x, c.p1.y);\r\n          }\r\n        }\r\n      }\r\n      this.self.ctx.stroke();\r\n      this.self.ctx.closePath();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.indexOfBodies()\r\n   * @param {string} font\r\n   * @param {string} color\r\n   */\r\n  indexOfBodies: function (font, color) {\r\n    this.self.ctx.save();\r\n    this.self.ctx.font = font || '10px Arial';\r\n    this.self.ctx.fillStyle = color || 'black';\r\n    for (let i = 0; i < this.self.bodies.length; i++) {\r\n      let p = this.self.bodies[i];\r\n      for (let j = 0; j < p.vertices.length; j++) {\r\n        let v = p.vertices[j].position;\r\n        this.self.ctx.fillText(i + '.' + j, (v.x - 10), (v.y - 10));\r\n      }\r\n    }\r\n    this.self.ctx.fill();\r\n    this.self.ctx.restore();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.renderCenterOfMass()\r\n   * @param {string} color\r\n   */\r\n  centerOfMass: function (color) {\r\n    this.self.ctx.fillStyle = color || 'black';\r\n    this.self.ctx.beginPath();\r\n    for (let i = 0; i < this.self.bodies.length; i++) {\r\n      let b = this.self.bodies[i];\r\n      this.self.ctx.fillRect(b.center.x - 2.5, b.center.y - 2.5, 5, 5);\r\n    }\r\n    this.self.ctx.fill();\r\n    this.self.ctx.closePath();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.boundingBox()\r\n   * @param {string} color\r\n   */\r\n  boundingBox: function (color) {\r\n    this.self.ctx.fillStyle = color || 'rgba(0,0,0,0.2)';\r\n    this.self.ctx.beginPath();\r\n    for (let i = 0; i < this.self.bodies.length; i++) {\r\n      let b = this.self.bodies[i];\r\n      this.self.ctx.fillRect(b.center.x - b.halfEx.x, b.center.y - b.halfEx.y,\r\n        b.halfEx.x + b.halfEx.x, b.halfEx.y + b.halfEx.y);\r\n    }\r\n    this.self.ctx.fill();\r\n    this.self.ctx.closePath();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.information()\r\n   */\r\n  information: function () {\r\n    let stat = 'Objects : ' + this.self.bodies.length;\r\n    let stat2 = 'Vertices : ' + this.self.vertices.length;\r\n    let stat3 = 'Constraints : ' + this.self.constraints.length;\r\n    this.self.ctx.fillStyle = 'black';\r\n    this.self.ctx.font = '14px Arial'\r\n    this.self.ctx.fillText(stat, 10, 20);\r\n    this.self.ctx.fillText(stat2, 10, 40);\r\n    this.self.ctx.fillText(stat3, 10, 60);\r\n  }\r\n}","const Renderer = require('./Renderer');\r\nconst Body = require('./Body');\r\nconst Collision = require('./Collision');\r\nconst Constraint = require('./Constraint');\r\nconst Vertex = require('./Vertex');\r\n\r\nAtomic.Body = Body;\r\nAtomic.Vertex = Vertex;\r\nAtomic.Constraint = Constraint;\r\n\r\n/**\r\n * Atomic.js\r\n * @description Greatly Simple 2D Physics Engine\r\n * @version v1.2.0\r\n * @author Anurag Hazra <hazru.anurag@gmail.com>\r\n * @constructor new Atomic()\r\n * @param {*} id \r\n * @param {*} width \r\n * @param {*} height \r\n * @param {*} gravity \r\n * @param {*} friction \r\n * @param {*} simIteration \r\n */\r\nfunction Atomic(id, width, height, gravity, friction, simIteration) {\r\n  this.canvas = document.querySelector(id);\r\n  this.width = width || 200;\r\n  this.height = height || 200;\r\n  this.canvas.width = this.width;\r\n  this.canvas.height = this.height;\r\n  this.ctx = this.canvas.getContext('2d');\r\n\r\n  this.gravity = (gravity === undefined) ? 1 : gravity;\r\n  this.friction = (friction === undefined) ? 0.1 : friction;\r\n  this.groundFriction = 0.1;\r\n\r\n  this.simIteration = (simIteration || 10);\r\n  this.constraintIterations = 1;\r\n  this.collisionIteration = this.simIteration / 2;\r\n\r\n  this.bodies = [];\r\n  this.vertices = [];\r\n  this.constraints = [];\r\n\r\n  this.collision = new Collision();\r\n\r\n  const self = this;\r\n\r\n  // init drag\r\n  this.dragVertex = null;\r\n  this.pointer = { x: 0, y: 0, isDown: false };\r\n  this.canvas.addEventListener('mousedown', () => self.pointer.isDown = true)\r\n  this.canvas.addEventListener('mouseup', () => self.pointer.isDown = false)\r\n  this.canvas.addEventListener('mousemove', function (e) {\r\n    self.pointer.x = e.offsetX;\r\n    self.pointer.y = e.offsetY;\r\n  })\r\n\r\n\r\n  // Poly Primitives\r\n  /**\r\n   *  predifined methods for creating models \r\n   * \tfunctions => > box(),\r\n   *               > triangle(),\r\n   *               > circle()\r\n   *  @method Poly\r\n   *  @type object\r\n   */\r\n  this.Poly = {\r\n    /**\r\n     * Create A Box\r\n     * @method Atomic.Poly.box()\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} w\r\n     * @param {number} h\r\n     * @param {object} opt\r\n     */\r\n    box: function (x, y, w, h, opt) {\r\n      var b = new Body({\r\n        mass: opt.mass,\r\n        angle: opt.angle,\r\n        static: (opt.static || false),\r\n        render: opt.render,\r\n        vertices: {\r\n          n0: { x: x, y: y },\r\n          n1: { x: x + w, y: y },\r\n          n2: { x: x + w, y: y + h },\r\n          n3: { x: x, y: y + h }\r\n        },\r\n        constraints: [\r\n          [\"n0\", \"n1\", true],\r\n          [\"n1\", \"n2\", true],\r\n          [\"n2\", \"n3\", true],\r\n          [\"n3\", \"n0\", true],\r\n          [\"n0\", \"n2\"],\r\n          [\"n3\", \"n1\"]\r\n        ]\r\n      }, self);\r\n      self.bodies.push(b);\r\n      return b;\r\n    },\r\n    /**\r\n     * Create A Triangle\r\n     * @method Atomic.Poly.triangle()\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} w\r\n     * @param {number} h\r\n     * @param {object} opt\r\n     */\r\n    triangle: function (x, y, w, h, opt) {\r\n      w /= 2;\r\n      h /= 2;\r\n      var b = new Body({\r\n        x: x,\r\n        y: y,\r\n        mass: opt.mass,\r\n        static: (opt.static || false),\r\n        render: opt.render,\r\n        vertices: {\r\n          0: { x: x - w, y: y + h },\r\n          1: { x: x, y: y - h },\r\n          2: { x: x + w, y: y + h }\r\n        },\r\n        constraints: [[0, 1, true], [1, 2, true], [2, 0, true]]\r\n      }, self);\r\n      self.bodies.push(b);\r\n      return b;\r\n    },\r\n    /**\r\n     * Create A Cricle\r\n     * @method Atomic.Poly.circle()\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} r\r\n     * @param {number} segs\r\n     * @param {object} opt\r\n     */\r\n    circle: function (x, y, r, segs, opt) {\r\n      let tmpV = {};\r\n      let tmpC = [];\r\n      let angle = 0;\r\n      let index = 0;\r\n      for (let i = 0; i < segs; i++) {\r\n        angle += Math.PI * 2 / segs;\r\n        let outer = (Math.cos((angle)) * r);\r\n        let inner = (Math.sin((angle)) * r);\r\n        tmpV[i] = {\r\n          x: outer + x, y: inner + y\r\n        }\r\n        tmpC.push([\r\n          i, ((i + (segs - segs / 2 + 2)) % segs), true\r\n        ]);\r\n        tmpC.push([\r\n          (i), ((i + segs - 1) % segs), false\r\n        ]);\r\n        index++;\r\n      }\r\n\r\n      tmpV[index] = { x: x, y: y };\r\n\r\n      for (let i = 0; i < index; i++) {\r\n        tmpC.push([\r\n          i, index, false\r\n        ])\r\n      }\r\n\r\n      var b = new Body({\r\n        x: x,\r\n        y: y,\r\n        mass: opt.mass,\r\n        static: (opt.static || false),\r\n        render: opt.render,\r\n        vertices: tmpV,\r\n        constraints: tmpC\r\n      }, self);\r\n      self.bodies.push(b);\r\n      return b;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Common Rendering Methods\r\n   * @functions => > dots(),\r\n   *               > pointIndex(),\r\n   *               > lines(),\r\n   *               > indexOfBodies(),\r\n   *               > centerOfMass(),\r\n   *               > boundingBox()\r\n   * @type Object\r\n   */\r\n  this.Render = Renderer.create(this);\r\n}\r\n\r\n\r\n\r\n/****************************/\r\n/***** ATOMIC PROTOTYPES ****/\r\n/****************************/\r\n\r\n\r\n/**\r\n * @method Atomic.addVertex()\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {boolean} pinned\r\n */\r\nAtomic.prototype.addVertex = function (x, y, pinned) {\r\n  let vertex = new Atomic.Vertex(this, { x: x, y: y }, pinned, {\r\n    friction: this.friction,\r\n    gravity: this.gravity,\r\n    canvas: this.canvas,\r\n  });\r\n  this.vertices.push(vertex);\r\n}\r\n\r\n/**\r\n * @method Atomic.addConstraint()\r\n * @param {number} i\r\n * @param {number} j\r\n * @param {boolean} edge\r\n */\r\nAtomic.prototype.addConstraint = function (i, j, edge) {\r\n  let cons = new Atomic.Constraint(this, this.vertices[i], this.vertices[j], edge);\r\n  this.constraints.push(cons);\r\n}\r\n\r\n\r\n/**\r\n * requestAnimationFrame\r\n * @method Atomic.frame()\r\n * @param {function} func \r\n * @param {string} color \r\n */\r\nAtomic.prototype.frame = function (func, color) {\r\n  this.clear(color);\r\n  let frame = window.requestAnimationFrame\r\n    || window.webkitRequestAnimationFrame\r\n    || window.msRequestAnimationFrame\r\n    || window.mozRequestAnimationFrame;\r\n  frame(func);\r\n}\r\n\r\n\r\n/**\r\n * Clear the canvas\r\n * @method Atomic.clear()\r\n * @param {string} color \r\n */\r\nAtomic.prototype.clear = function (color) {\r\n  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  if (color) {\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @method Atomic.createPoly()\r\n * Creates a polygon\r\n * @param {array|string} vert \r\n * @param {array} cons optional (calculates cneter point) \r\n * @param {object} opt \r\n */\r\nAtomic.prototype.createPoly = function (vert, cons, opt) {\r\n  if (opt === undefined) opt = {};\r\n\r\n  let b = new Atomic.Body({\r\n    mass: (arguments.length === 2) ? cons.mass : opt.mass,\r\n    render: (arguments.length === 2) ? cons.render : opt.render,\r\n    vertices: vert,\r\n    constraints: (cons || [])\r\n  }, this);\r\n\r\n  if (arguments.length === 2) {\r\n    // join outer vertex\r\n    for (let i = 0; i < b.vertices.length; i++) {\r\n      let bvert = b.vertices;\r\n      let cons = new Atomic.Constraint(b, b.vertices[i], b.vertices[(i + 1) % bvert.length], true);\r\n      b.edges.push(cons);\r\n      this.constraints.push(cons);\r\n      b.eCount++;\r\n    }\r\n\r\n    // add center vertex\r\n    b.calculateCenter();\r\n    let centerVertex = new Atomic.Vertex(b, b.center, false, {\r\n      friction: this.friction,\r\n      gravity: this.gravity,\r\n      canvas: this.canvas,\r\n      groundFriction: this.groundFriction\r\n    });\r\n    b.vertices.push(centerVertex);\r\n    b.positions.push(centerVertex.position);\r\n    this.vertices.push(centerVertex);\r\n    b.vCount++;\r\n    \r\n\r\n\r\n    // join to center vertex\r\n    for (let i = 0; i < b.vertices.length - 1; i++) {\r\n      let cons = new Atomic.Constraint(b, b.vertices[i], b.vertices[b.vertices.length - 1], false);\r\n      b.edges.push(cons);\r\n      b.eCount++;\r\n      this.constraints.push(cons)\r\n    }\r\n  }\r\n\r\n  this.bodies.push(b);\r\n  return b;\r\n}\r\n\r\n\r\n/** Physics Simulation Update */\r\n\r\n/**\r\n * @method Atomic.integrate()\r\n * updates vertices\r\n */\r\nAtomic.prototype.integrate = function () {\r\n  for (let i = 0; i < this.vertices.length; i++) {\r\n    this.vertices[i].integrate();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @method Atomic.updateConstraints()\r\n * solves all verlet physics \r\n */\r\nAtomic.prototype.updateConstraints = function () {\r\n  // solve constrains\r\n  for (let i = 0; i < this.constraints.length; i++) {\r\n    this.constraints[i].solve();\r\n  }\r\n}\r\n\r\n/**\r\n * @method Atomic.updateBoundary()\r\n * handles all bodies boundary collisions\r\n */\r\nAtomic.prototype.updateBoundary = function () {\r\n  for (let i = 0; i < this.vertices.length; i++) {\r\n    this.vertices[i].boundary();\r\n  }\r\n}\r\n\r\n/**\r\n * @method Atomic.updateCollision()\r\n * Batch Update Collisions\r\n */\r\nAtomic.prototype.updateCollision = function () {\r\n  // Recalculate the bounding boxes\r\n  for (let i = 0; i < this.bodies.length; i++) {\r\n    this.bodies[i].calculateCenter();\r\n  }\r\n\r\n  // // collisions detection\r\n  for (let i = 0; i < this.bodies.length - 1; i++) {\r\n    let b0 = this.bodies[i];\r\n    for (let j = i + 1; j < this.bodies.length; j++) {\r\n      let b1 = this.bodies[j];\r\n      if (this.collision.aabb(b0, b1)) {\r\n        this.collision.SAT(b0, b1)\r\n          && this.collision.resolve(this.friction);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @method Atomic.update()\r\n * Solve All Collision And Update\r\n */\r\nAtomic.prototype.update = function () {\r\n  this.integrate();\r\n\r\n  for (let n = 0; n < this.simIteration; n++) {\r\n    for (let j = 0; j < this.constraintIterations; j++) {\r\n      this.updateBoundary();\r\n      this.updateConstraints();\r\n    }\r\n    this.updateCollision();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * draw all bodies\r\n * @method Atomic.render()\r\n */\r\nAtomic.prototype.render = function () {\r\n  for (let i = 0; i < this.bodies.length; i++) {\r\n    this.bodies[i].draw();\r\n    this.bodies[i].drag();\r\n  }\r\n};\r\n\r\n\r\n// Utils\r\n\r\n/**\r\n * @method Atomic.drag()\r\n * drag Poly Objects\r\n */\r\nAtomic.prototype.drag = function () {\r\n  if (this.dragVertex) {\r\n    // draw mouse link\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(this.dragVertex.position.x, this.dragVertex.position.y);\r\n    this.ctx.lineTo(this.pointer.x, this.pointer.y);\r\n    this.ctx.strokeStyle = \"#000\";\r\n    this.ctx.stroke();\r\n\r\n    // correct position\r\n    var s = this.dragVertex.parent.mass * 1;\r\n    this.dragVertex.position.x += (this.pointer.x - this.dragVertex.position.x) / s;\r\n    this.dragVertex.position.y += (this.pointer.y - this.dragVertex.position.y) / s;\r\n  }\r\n};\r\n\r\n\r\n\r\n/**\r\n * shows current framerate \r\n * @method Atomic.showFps()\r\n * @param {object} option \r\n */\r\nAtomic.prototype.fpsScope = {\r\n  fps: null,\r\n  bar_vx: 0,\r\n  lastframe: null,\r\n  fpsBars: []\r\n};\r\nAtomic.prototype.showFps = function (option) {\r\n  option = (!option) ? {} : option;\r\n\r\n  let x = (option.x !== undefined) ? option.x : 10;\r\n  let y = (option.y !== undefined) ? option.y : 10;\r\n  let updateSpeed = (option.updateSpeed !== undefined) ? option.updateSpeed : 3;\r\n\r\n  let date = new Date();\r\n  if (!this.fpsScope.lastframe) {\r\n    this.fpsScope.lastframe = date.valueOf();\r\n    this.fpsScope.fps = 0;\r\n    return;\r\n  }\r\n\r\n  let delta = (date.valueOf() - this.fpsScope.lastframe) / 1000;\r\n  let frametime = (date.valueOf() - this.fpsScope.lastframe);\r\n  this.fpsScope.lastframe = date.valueOf();\r\n\r\n\r\n  //bar_vx variable for moving bars in x axis\r\n  this.fpsScope.bar_vx++;\r\n  if (this.fpsScope.bar_vx > updateSpeed) {\r\n    this.fpsScope.bar_vx = 0;\r\n  }\r\n\r\n  //if bar_vx variable is equal to 1 then roundup the fps\r\n  if (this.fpsScope.bar_vx === 0) {\r\n    this.fpsScope.fps = (1 / delta).toFixed(1);\r\n  }\r\n\r\n  //render\r\n  let color = option.barsColor || 'green';\r\n  if (this.fpsScope.fps < 40) { color = 'orange' };\r\n  if (this.fpsScope.fps < 20) { color = 'red'; };\r\n\r\n  this.fpsScope.fpsBars.push({\r\n    x: x + (this.fpsScope.bar_vx),\r\n    y: this.fpsScope.fps / 2,\r\n    color: color\r\n  });\r\n\r\n  if (this.fpsScope.fpsBars.length > 87) {\r\n    this.fpsScope.fpsBars.shift();\r\n  }\r\n\r\n\r\n  let ctx = this.ctx;\r\n  function drawFpsMeter() {\r\n    ctx.beginPath();\r\n\r\n    //bounds\r\n    ctx.fillStyle = (option.background) || 'white';\r\n    ctx.strokeStyle = 'black';\r\n    ctx.lineWidth = 0.5;\r\n    ctx.fillRect(x - 5, y - 5, 100, 60);\r\n    ctx.strokeRect(x - 5, y - 5, 100, 60);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n\r\n    //fps\r\n    ctx.fillStyle = option.fontColor || '#555';\r\n    ctx.font = option.font || '10px Arial';\r\n    ctx.fillText('FPS : ' + this.fpsScope.fps, x, y + 10);\r\n\r\n    //bars\r\n    ctx.save();\r\n    ctx.scale(1, -1); //rotate\r\n    for (let i = 0; i < this.fpsScope.fpsBars.length; i++) {\r\n      ctx.fillStyle = this.fpsScope.fpsBars[i].color;\r\n      this.fpsScope.fpsBars[i].x += 1;\r\n      ctx.fillRect(this.fpsScope.fpsBars[i].x - 2, -50 - y, 1.2, this.fpsScope.fpsBars[i].y);\r\n    }\r\n    ctx.restore();\r\n\r\n    //60fps line\r\n    ctx.strokeStyle = 'crimson';\r\n    ctx.moveTo(x, y + 20);\r\n    ctx.lineTo(x + 90, y + 20);\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n\r\n    ctx.closePath();\r\n  }\r\n  drawFpsMeter.call(this, null);\r\n\r\n  return this.fpsScope.fps;\r\n}\r\n\r\nmodule.exports = Atomic;","module.exports = require('./Atomic');\r\n"],"sourceRoot":""}