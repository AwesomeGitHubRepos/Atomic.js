{"version":3,"sources":["webpack://Atomic/webpack/universalModuleDefinition","webpack://Atomic/webpack/bootstrap","webpack://Atomic/./src/Vector.js","webpack://Atomic/./src/Vertex.js","webpack://Atomic/./src/Constraint.js","webpack://Atomic/./src/Collision.js","webpack://Atomic/./src/Body.js","webpack://Atomic/./src/Renderer.js","webpack://Atomic/./src/Atomic.js","webpack://Atomic/./src/app.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector","x","y","this","dist","v1","v2","sub","add","fromAngle","angle","v","Math","cos","sin","random2D","random","PI","set","arguments","length","sub2","v0","mult","div","mag","sqrt","magSq","setMag","normalize","limit","max","heading","atan2","dx","dy","copy","negative","array","toString","z","unit","subtract","dot","scale","normal","nx","ny","len","squareDist","perp","Vertex","parent","vertex","pinned","opt","position","oldPosition","integrate","pos","oldpos","friction","gravity","boundary","old","vx","canvas","height","groundFriction","width","Constraint","edge","p0","p1","solve","diffrence","adjustX","adjustY","Collision","testAxis","response","relTanVel","tangent","relVel","center","axis","line","depth","SAT","B0","B1","checkAABB","minDistance","Number","MAX_SAFE_INTEGER","n0","edges","project","min","abs","xx","yy","smallestDist","vCount","vertices","halfEx","resolve","o0","o1","vp","vo","rs","lambda","m0","mass","m1","tm","relTv","rt","aabb","bound","minX","maxX","minY","maxY","Body","engine","eCount","positions","render","fillStyle","undefined","static","arr","split","svgVertices","compiled","push","constraints","cons","constraint","calculateCenter","a","b","proj","draw","ctx","beginPath","moveTo","lineTo","strokeStyle","stroke","fill","closePath","drag","pointer","isDown","dragVertex","isPointInPath","self","slf","dots","radius","color","PI2","rad","j","hidden","arc","pointIndex","font","fillText","lines","linewidth","showHidden","lineWidth","indexOfBodies","save","bodies","restore","centerOfMass","fillRect","boundingBox","information","stat","stat2","stat3","Renderer","Atomic","id","simIteration","document","querySelector","getContext","constraintIterations","collisionIteration","collision","addEventListener","e","offsetX","offsetY","Poly","box","w","h","n1","n2","n3","triangle","0","1","2","circle","segs","tmpV","tmpC","index","outer","inner","Render","addVertex","addConstraint","frame","func","clear","requestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","clearRect","createPoly","vert","bvert","centerVertex","updateConstraints","updateBoundary","updateCollision","b0","b1","update","fpsScope","fps","bar_vx","lastframe","fpsBars","showFps","option","updateSpeed","date","Date","valueOf","delta","toFixed","barsColor","shift","strokeRect","fontColor"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,OAAAD,IAEAD,EAAA,OAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,mBC3EA,SAAAC,EAAAC,EAAAC,GACAC,KAAAF,KAAA,EACAE,KAAAD,KAAA,EAIAF,EAAAI,KAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAD,KAAAE,IAEAN,EAAAO,IAAA,SAAAF,EAAAC,GACA,WAAAN,EAAAK,EAAAJ,EAAAK,EAAAL,EAAAI,EAAAH,EAAAI,EAAAJ,IAEAF,EAAAQ,IAAA,SAAAH,EAAAC,GACA,WAAAN,EAAAK,EAAAJ,EAAAK,EAAAL,EAAAI,EAAAH,EAAAI,EAAAJ,IAEAF,EAAAS,UAAA,SAAAC,GACA,IAAAC,EAAA,IAAAX,EAAA,KAGA,OAFAW,EAAAV,EAAAW,KAAAC,IAAAH,GACAC,EAAAT,EAAAU,KAAAE,IAAAJ,GACAC,GAEAX,EAAAe,SAAA,SAAAJ,GACA,OAAAX,EAAAS,UAAAG,KAAAI,SAAAJ,KAAAK,GAAA,MAGAjB,EAAAJ,WACAsB,IAAA,SAAAjB,EAAAC,GAGA,OAFAC,KAAAF,IACAE,KAAAD,IACAC,MAEAK,IAAA,SAAAP,EAAAC,GAQA,OAPA,IAAAiB,UAAAC,QACAjB,KAAAF,OACAE,KAAAD,GAAAD,EAAAC,GACK,IAAAiB,UAAAC,SACLjB,KAAAF,KACAE,KAAAD,MAEAC,MAEAI,IAAA,SAAAN,EAAAC,GAQA,OAPAD,aAAAD,GACAG,KAAAF,OACAE,KAAAD,GAAAD,EAAAC,IAEAC,KAAAF,KACAE,KAAAD,MAEAC,MAEAkB,KAAA,SAAAC,EAAAjB,GAGA,OAFAF,KAAAF,EAAAqB,EAAArB,EAAAI,EAAAJ,EACAE,KAAAD,EAAAoB,EAAApB,EAAAG,EAAAH,EACAC,MAEAoB,KAAA,SAAAZ,GAQA,MAPA,iBAAAA,GACAR,KAAAF,GAAAU,EACAR,KAAAD,GAAAS,IAEAR,KAAAF,GAAAU,EAAAV,EACAE,KAAAD,GAAAS,EAAAT,GAEAC,MAEAqB,IAAA,SAAAb,GAQA,MAPA,iBAAAA,GACAR,KAAAF,GAAAU,EACAR,KAAAD,GAAAS,IAEAR,KAAAF,GAAAU,EAAAV,EACAE,KAAAD,GAAAS,EAAAT,GAEAC,MAEAsB,IAAA,WACA,OAAAb,KAAAc,KAAAvB,KAAAF,EAAAE,KAAAF,EAAAE,KAAAD,EAAAC,KAAAD,IAEAyB,MAAA,WACA,OAAAxB,KAAAF,EAAAE,KAAAF,EAAAE,KAAAD,EAAAC,KAAAD,GAEA0B,OAAA,SAAA3C,GAGA,OAFAkB,KAAA0B,YACA1B,KAAAoB,KAAAtC,GACAkB,MAEA0B,UAAA,WACA,IAAAzD,EAAA+B,KAAAsB,MAIA,OAHArD,EAAA,GACA+B,KAAAqB,IAAApD,GAEA+B,MAEA2B,MAAA,SAAAC,GAKA,OAJA5B,KAAAsB,MAAAM,IACA5B,KAAA0B,YACA1B,KAAAoB,KAAAQ,IAEA5B,MAEA6B,QAAA,WACA,OAAApB,KAAAqB,OAAA9B,KAAAD,EAAAC,KAAAF,IAEAG,KAAA,SAAAO,GACA,IAAAuB,EAAA/B,KAAAF,EAAAU,EAAAV,EACAkC,EAAAhC,KAAAD,EAAAS,EAAAT,EACA,OAAAU,KAAAc,KAAAQ,IAAAC,MAEAC,KAAA,WACA,WAAApC,EAAAG,KAAAF,EAAAE,KAAAD,IAEAmC,SAAA,WAGA,OAFAlC,KAAAF,GAAAE,KAAAF,EACAE,KAAAD,GAAAC,KAAAD,EACAC,MAEAmC,MAAA,WACA,OAAAnC,KAAAF,EAAAE,KAAAD,IAEAqC,SAAA,WACA,UAAApC,KAAAF,EAAA,KAAAE,KAAAD,EAAA,KAAAC,KAAAqC,EAAA,KAEAC,KAAA,WACA,OAAAtC,KAAAqB,IAAArB,KAAAsB,QAEAiB,SAAA,SAAA/B,GACA,WAAAX,EAAAG,KAAAF,EAAAU,EAAAR,KAAAD,EAAAS,IAEAgC,IAAA,SAAAhC,GACA,OAAAR,KAAAF,EAAAU,EAAAV,EAAAE,KAAAD,EAAAS,EAAAT,GAEA0C,MAAA,SAAAjC,EAAAZ,GAGA,OAFAI,KAAAF,EAAAU,EAAAV,EAAAF,EACAI,KAAAD,EAAAS,EAAAT,EAAAH,EACAI,MAEA0C,OAAA,SAAAvB,EAAAjB,GAEA,IAAAyC,EAAAxB,EAAApB,EAAAG,EAAAH,EACA6C,EAAA1C,EAAAJ,EAAAqB,EAAArB,EAEA+C,EAAA,EAAApC,KAAAc,KAAAoB,IAAAC,KAGA,OAFA5C,KAAAF,EAAA6C,EAAAE,EACA7C,KAAAD,EAAA6C,EAAAC,EACA7C,MAEAiC,KAAA,SAAAzB,GAGA,OAFAR,KAAAF,EAAAU,EAAAV,EACAE,KAAAD,EAAAS,EAAAT,EACAC,MAEA8C,WAAA,SAAAtC,GACA,IAAAuB,EAAA/B,KAAAF,EAAAU,EAAAV,EACAkC,EAAAhC,KAAAD,EAAAS,EAAAT,EACA,OAAAgC,IAAAC,KAEAe,KAAA,SAAAvC,GAGA,OAFAR,KAAAF,GAAAU,EAAAT,EACAC,KAAAD,EAAAS,EAAAV,EACAE,OAIA1C,EAAAD,QAAAwC,mBC3KA,MAAAA,EAAAlC,EAAA,GAQA,SAAAqF,EAAAC,EAAAC,EAAAC,EAAAC,GACApD,KAAAoD,MACApD,KAAAiD,SACAjD,KAAAqD,SAAA,IAAAxD,EAAAqD,EAAApD,EAAAoD,EAAAnD,GACAC,KAAAsD,YAAA,IAAAzD,EAAAqD,EAAApD,EAAAoD,EAAAnD,GACAC,KAAAmD,SAOAH,EAAAvD,UAAA8D,UAAA,WACA,IAAAvD,KAAAmD,OAAA,CACA,IAAAK,EAAAxD,KAAAqD,SACAI,EAAAzD,KAAAsD,YACAxD,EAAA0D,EAAA1D,EACAC,EAAAyD,EAAAzD,EAEAyD,EAAA1D,IAAA0D,EAAA1D,EAAA2D,EAAA3D,GAAAE,KAAAoD,IAAAM,SACAF,EAAAzD,IAAAyD,EAAAzD,EAAA0D,EAAA1D,GAAAC,KAAAoD,IAAAM,SAAA1D,KAAAoD,IAAAO,QACAF,EAAA1C,IAAAjB,EAAAC,KAQAiD,EAAAvD,UAAAmE,SAAA,WACA,IAAAJ,EAAAxD,KAAAqD,SACAQ,EAAA7D,KAAAsD,YACAQ,EAAAN,EAAA1D,EAAA+D,EAAA/D,EACA0D,EAAAzD,EAAA8D,EAAA9D,EAGAyD,EAAAzD,EAAA,EACAyD,EAAAzD,EAAA,EACGyD,EAAAzD,EAAAC,KAAAoD,IAAAW,OAAAC,SACHR,EAAA1D,IAAA0D,EAAAzD,EAAAC,KAAAoD,IAAAW,OAAAC,QAAAF,EAAA9D,KAAAoD,IAAAa,eACAT,EAAAzD,EAAAC,KAAAoD,IAAAW,OAAAC,QAIAR,EAAA1D,EAAA,EACA0D,EAAA1D,EAAA,EACG0D,EAAA1D,EAAAE,KAAAoD,IAAAW,OAAAG,QACHV,EAAA1D,EAAAE,KAAAoD,IAAAW,OAAAG,QAIA5G,EAAAD,QAAA2F,iBCpDA,SAAAmB,EAAAlB,EAAA9B,EAAAjB,EAAAkE,GACApE,KAAAiD,SACAjD,KAAAmB,KACAnB,KAAAE,KACAF,KAAAqE,GAAAlD,EAAAkC,SACArD,KAAAsE,GAAApE,EAAAmD,SACArD,KAAAoE,OACApE,KAAAC,KAAAQ,KAAAc,KAAAvB,KAAAqE,GAAAvB,WAAA9C,KAAAsE,KAQAH,EAAA1E,UAAA8E,MAAA,WACA,IAAAxC,EAAA/B,KAAAsE,GAAAxE,EAAAE,KAAAqE,GAAAvE,EACAkC,EAAAhC,KAAAsE,GAAAvE,EAAAC,KAAAqE,GAAAtE,EACA5B,EAAAsC,KAAAc,KAAAQ,IAAAC,KAiBA,MAAAwC,GAAArG,EAAA6B,KAAAC,MAAA9B,EACAsG,EAAA,GAAA1C,EAAAyC,EACAE,EAAA,GAAA1C,EAAAwC,EAEAxE,KAAAqE,GAAAvE,GAAA2E,EACAzE,KAAAqE,GAAAtE,GAAA2E,EACA1E,KAAAsE,GAAAxE,GAAA2E,EACAzE,KAAAsE,GAAAvE,GAAA2E,GAGApH,EAAAD,QAAA8G,mBCpDA,MAAAtE,EAAAlC,EAAA,GAMA,SAAAgH,IACA3E,KAAA4E,SAAA,IAAA/E,EAAA,KACAG,KAAA6E,SAAA,IAAAhF,EAAA,KACAG,KAAA8E,UAAA,IAAAjF,EAAA,KACAG,KAAA+E,QAAA,IAAAlF,EAAA,KACAG,KAAAgF,OAAA,IAAAnF,EAAA,KACAG,KAAAiF,OAAA,IAAApF,EAAA,KACAG,KAAAkF,KAAA,IAAArF,EAAA,KACAG,KAAAmF,KAAA,IAAAtF,EAAA,KACAG,KAAAoF,MAAA,EACApF,KAAAoE,KAAA,KACApE,KAAAkD,OAAA,KASAyB,EAAAlF,UAAA4F,IAAA,SAAAC,EAAAC,GAEAvF,KAAAwF,UAAAD,EAAAD,GAEA,IAAAG,EAAAC,OAAAC,iBACA,MAAAC,EAAAN,EAAAO,MAAA5E,OAIA,QAAApD,EAAA,EAAAyB,EAAAsG,EAHAL,EAAAM,MAAA5E,OAG8BpD,EAAAyB,EAAOzB,IAAA,CAErC,IAAAuG,EAAAvG,EAAA+H,EAAAN,EAAAO,MAAAhI,GAAA0H,EAAAM,MAAAhI,EAAA+H,GAIA5F,KAAA4E,SAAAlC,OAAA0B,EAAAC,GAAAD,EAAAE,IAGAgB,EAAAQ,QAAA9F,KAAA4E,UACAW,EAAAO,QAAA9F,KAAA4E,UAGA,MAAA3E,EAAAqF,EAAAS,IAAAR,EAAAQ,IAAAR,EAAAQ,IAAAT,EAAA1D,IAAA0D,EAAAS,IAAAR,EAAA3D,IAGA,GAAA3B,EAAA,EACA,SACKQ,KAAAuF,IAAA/F,GAAAwF,IAELA,EAAAhF,KAAAuF,IAAA/F,GACAD,KAAAkF,KAAAjD,KAAAjC,KAAA4E,UACA5E,KAAAoE,QASA,GAJApE,KAAAoF,MAAAK,EAIAzF,KAAAoE,KAAAnB,QAAAsC,EAAA,CACA,MAAAxG,EAAAwG,EACAA,EAAAD,EACAA,EAAAvG,EAKA,MAAAkH,EAAAX,EAAAL,OAAAnF,EAAAyF,EAAAN,OAAAnF,EACAoG,EAAAZ,EAAAL,OAAAlF,EAAAwF,EAAAN,OAAAlF,EACAC,KAAAkF,KAAApF,EAAAmG,EAAAjG,KAAAkF,KAAAnF,EAAAmG,EAIA,GACAlG,KAAAkF,KAAAhD,WAGA,IAAA1B,EAAAP,EAAAkG,EAAAT,OAAAC,iBACA,QAAA9H,EAAA,EAAiBA,EAAAyH,EAAAc,OAAevI,IAEhC2C,EAAA8E,EAAAe,SAAAxI,GACAmC,KAAAmF,KAAAjE,KAAAV,EAAA6C,SAAAkC,EAAAN,SACAhF,EAAAD,KAAAkF,KAAA1C,IAAAxC,KAAAmF,OAEAgB,IACAA,EAAAlG,EACAD,KAAAkD,OAAA1C,GAKA,UAGAmE,EAAAlF,UAAA+F,UAAA,SAAAD,EAAAD,GACA,KACA,EAAA7E,KAAAuF,IAAAT,EAAAN,OAAAnF,EAAAwF,EAAAL,OAAAnF,IAAAyF,EAAAe,OAAAxG,EAAAwF,EAAAgB,OAAAxG,IACA,EAAAW,KAAAuF,IAAAT,EAAAN,OAAAlF,EAAAuF,EAAAL,OAAAlF,IAAAwF,EAAAe,OAAAvG,EAAAuF,EAAAgB,OAAAvG,IAEA,UASA4E,EAAAlF,UAAA8G,QAAA,SAAA7C,GAEA,IAAAW,EAAArE,KAAAoE,KAAAC,GACAC,EAAAtE,KAAAoE,KAAAE,GACAkC,EAAAxG,KAAAoE,KAAAjD,GAAAmC,YACAmD,EAAAzG,KAAAoE,KAAAlE,GAAAoD,YACAoD,EAAA1G,KAAAkD,OAAAG,SACAsD,EAAA3G,KAAAkD,OAAAI,YACAsD,EAAA5G,KAAA6E,SAEA7E,KAAA6E,SAAApC,MAAAzC,KAAAkF,KAAAlF,KAAAoF,OAIA,IAAArG,EAAA0B,KAAAuF,IAAA3B,EAAAvE,EAAAwE,EAAAxE,GAAAW,KAAAuF,IAAA3B,EAAAtE,EAAAuE,EAAAvE,IACA2G,EAAA5G,EAAA8G,EAAA9G,EAAAuE,EAAAvE,IAAAwE,EAAAxE,EAAAuE,EAAAvE,IACA4G,EAAA3G,EAAA6G,EAAA7G,EAAAsE,EAAAtE,IAAAuE,EAAAvE,EAAAsE,EAAAtE,GAEA8G,EAAA,GAAA9H,KAAA,EAAAA,IAAA,EAAAA,IAGA+H,EAAA9G,KAAAkD,OAAAD,OAAA8D,KACAC,EAAAhH,KAAAoE,KAAAnB,OAAA8D,KACAE,EAAAH,EAAAE,EAEAF,GAAAG,EACAD,GAAAC,EAGA5C,EAAAvE,GAAA8G,EAAA9G,GAAA,EAAAf,GAAA8H,EAAAC,EACAzC,EAAAtE,GAAA6G,EAAA7G,GAAA,EAAAhB,GAAA8H,EAAAC,EACAxC,EAAAxE,GAAA8G,EAAA9G,EAAAf,EAAA8H,EAAAC,EACAxC,EAAAvE,GAAA6G,EAAA7G,EAAAhB,EAAA8H,EAAAC,EACAJ,EAAA5G,GAAA8G,EAAA9G,EAAAkH,EACAN,EAAA3G,GAAA6G,EAAA7G,EAAAiH,EAQAhH,KAAAgF,OAAAjE,IACA2F,EAAA5G,EAAA6G,EAAA7G,EAAA,IAAAuE,EAAAvE,EAAAwE,EAAAxE,EAAA0G,EAAA1G,EAAA2G,EAAA3G,GACA4G,EAAA3G,EAAA4G,EAAA5G,EAAA,IAAAsE,EAAAtE,EAAAuE,EAAAvE,EAAAyG,EAAAzG,EAAA0G,EAAA1G,IAIAC,KAAA+E,QAAAhC,KAAA/C,KAAAkF,MAGA,IAAAgC,EAAAlH,KAAAgF,OAAAxC,IAAAxC,KAAA+E,SACAoC,EAAAnH,KAAA8E,UAAA/D,IAAAf,KAAA+E,QAAAjF,EAAAoH,EAAAlH,KAAA+E,QAAAhF,EAAAmH,GAIAP,EAAA7G,GADA,IACAqH,EAAArH,EAAAkH,EACAL,EAAA5G,GAFA,IAEAoH,EAAApH,EAAAiH,EAEAR,EAAA1G,GAAAqH,EAAArH,GAAA,EAAAf,GAJA,IAIA8H,EAAAC,EACAN,EAAAzG,GAAAoH,EAAApH,GAAA,EAAAhB,GALA,IAKA8H,EAAAC,EACAL,EAAA3G,GAAAqH,EAAArH,EAAAf,EANA,IAMA8H,EAAAC,EACAL,EAAA1G,GAAAoH,EAAApH,EAAAhB,EAPA,IAOA8H,EAAAC,GAIAnC,EAAAlF,UAAA2H,KAAA,SAAA9B,EAAAC,GACA,OAAAD,EAAA+B,MAAAC,MAAA/B,EAAA8B,MAAAE,MACAjC,EAAA+B,MAAAG,MAAAjC,EAAA8B,MAAAI,MACAnC,EAAA+B,MAAAE,MAAAhC,EAAA8B,MAAAC,MACA/B,EAAA8B,MAAAI,MAAAnC,EAAA+B,MAAAG,MAGAlK,EAAAD,QAAAsH,mBC5LA,MAAA9E,EAAAlC,EAAA,GACAwG,EAAAxG,EAAA,GACAqF,EAAArF,EAAA,GAOA,SAAA+J,EAAAtE,EAAAuE,GAwBA,GAvBA3H,KAAAoG,OAAA,EACApG,KAAA4H,OAAA,EACA5H,KAAA+F,IAAA,EACA/F,KAAA4B,IAAA,EACA5B,KAAAqG,YACArG,KAAA6H,aACA7H,KAAA6F,SACA7F,KAAAqH,SACArH,KAAAiF,OAAA,IAAApF,EAAA,KACAG,KAAAsG,OAAA,IAAAzG,EAAA,KACAG,KAAA2H,SAEA3H,KAAA8H,OAAA1E,EAAA0E,SAA+BC,UAAA,SAC/B/H,KAAA+G,UAAAiB,GAAA5E,EAAA2D,KAAA,EAAA3D,EAAA2D,KACA/G,KAAAiI,OAAA7E,EAAA6E,SAAA,EACAjI,KAAAO,MAAA6C,EAAA7C,OAAA,EAEAP,KAAAiI,SACAjI,KAAA+G,KAAArB,OAAAC,kBAKA,iBAAAvC,EAAAiD,SAAA,CACA,IAAA6B,EAAA9E,EAAAiD,SAAA8B,MAAA,KACAC,KACA,QAAAvK,EAAA,EAAmBA,EAAAqK,EAAAjH,OAAgBpD,IACnCuK,EAAAvK,IAAwBiC,EAAA4F,OAAAwC,EAAArK,GAAAsK,MAAA,SAAApI,EAAA2F,OAAAwC,EAAArK,GAAAsK,MAAA,UAGxB/E,EAAAiD,SAAA+B,EAKA,QAAA9I,KAAA8D,EAAAiD,SAAA,CACA,IAAAnD,EAAA,IAAAF,EAAAhD,KAAAoD,EAAAiD,SAAA/G,GAAAU,KAAAiI,QACAvE,SAAA1D,KAAA2H,OAAAjE,SACAC,QAAA3D,KAAA2H,OAAAhE,QACAI,OAAA/D,KAAA2H,OAAA5D,OACAE,eAAAjE,KAAA2H,OAAA1D,iBAEAb,EAAAiD,SAAA/G,GAAA+I,SAAAnF,EACAlD,KAAAqG,SAAAiC,KAAApF,GACAlD,KAAA6H,UAAAS,KAAApF,EAAAG,UACArD,KAAA2H,OAAAtB,SAAAiC,KAAApF,GACAlD,KAAAoG,SAKA,QAAAvI,EAAA,EAAiBA,EAAAuF,EAAAmF,YAAAtH,OAA4BpD,IAAA,CAC7C,IAAA2K,EAAApF,EAAAmF,YAAA1K,GAEA4K,EAAA,IAAAtE,EACAnE,KACAoD,EAAAiD,SAAAmC,EAAA,IAAAH,SACAjF,EAAAiD,SAAAmC,EAAA,IAAAH,SACAG,EAAA,QAGAC,EAAArE,OACApE,KAAA6F,MAAAyC,KAAAG,GACAzI,KAAA4H,UAEA5H,KAAA2H,OAAAY,YAAAD,KAAAG,GAGA,OAAAzI,KAAAO,MAKA,QAAA1C,EAAA,EAAmBA,EAAAmC,KAAAqG,SAAApF,OAA0BpD,IAAA,CAC7C,IAAA0C,EAAAP,KAAAO,MAAA,IAAAE,KAAAK,GACAd,KAAA0I,kBACA1I,KAAAqG,SAAAxI,GAAAwF,SAAAvD,EAAAE,KAAAqG,SAAAxI,GAAAwF,SAAAvD,EAAAW,KAAAC,IAAAH,GAAAP,KAAAqG,SAAAxI,GAAAwF,SAAAtD,EAAAU,KAAAE,IAAAJ,GACAP,KAAAqG,SAAAxI,GAAAwF,SAAAtD,EAAAC,KAAAqG,SAAAxI,GAAAwF,SAAAvD,EAAAW,KAAAE,IAAAJ,GAAAP,KAAAqG,SAAAxI,GAAAwF,SAAAtD,EAAAU,KAAAC,IAAAH,GACAP,KAAAqG,SAAAxI,GAAAyF,YAAAxD,EAAAE,KAAAqG,SAAAxI,GAAAwF,SAAAvD,EACAE,KAAAqG,SAAAxI,GAAAyF,YAAAvD,EAAAC,KAAAqG,SAAAxI,GAAAwF,SAAAtD,GAWA2H,EAAAjI,UAAAiJ,gBAAA,WACA,IAAApB,EAAA5B,OAAAC,iBACA6B,EAAA9B,OAAAC,iBACA4B,GAAA7B,OAAAC,iBACA8B,GAAA/B,OAAAC,iBAEA,QAAA9H,EAAA,EAAiBA,EAAAmC,KAAAqG,SAAApF,OAA0BpD,IAAA,CAC3C,IAAA8B,EAAAK,KAAA6H,UAAAhK,GAEA8B,EAAAG,EAAAyH,MAAA5H,EAAAG,GACAH,EAAAI,EAAA0H,MAAA9H,EAAAI,GACAJ,EAAAG,EAAAwH,MAAA3H,EAAAG,GACAH,EAAAI,EAAAyH,MAAA7H,EAAAI,GAIAC,KAAAiF,OAAAlE,IAAA,IAAAuG,EAAAC,GAAA,IAAAC,EAAAC,IAGAzH,KAAAsG,OAAAvF,IAAA,IAAAwG,EAAAD,GAAA,IAAAG,EAAAD,IAEAxH,KAAAqH,OAAgBC,OAAAE,OAAAD,OAAAE,SAQhBC,EAAAjI,UAAAqG,QAAA,SAAAxG,GACA,SAAAkD,EAAAmG,EAAAC,GACA,OAAAD,EAAA7I,EAAA8I,EAAA9I,EAAA6I,EAAA5I,EAAA6I,EAAA7I,EAGA,IAAA8I,EAAArG,EAAAxC,KAAAqG,SAAA,GAAAhD,SAAA/D,GACAyG,EAAAnE,IAAAiH,EAEA,QAAAhL,EAAA,EAAiBA,EAAAmC,KAAAqG,SAAApF,OAA0BpD,IAAA,EAG3CgL,EAAArG,EAFAxC,KAAAqG,SAAAxI,GAAAwF,SAEA/D,IACAyG,IAAqBA,EAAA8C,GACrBA,EAAAjH,MAAqBA,IAAAiH,GAErB7I,KAAA+F,MACA/F,KAAA4B,SAQA8F,EAAAjI,UAAAqJ,KAAA,WACA9I,KAAA2H,OAAAoB,IAAAC,YACA,IAAArJ,EAAAK,KAAA6F,MAAA,GAAAxB,GAEA,QAAAxG,KAAAmC,KAAA8H,OACA9H,KAAA8H,OAAApI,eAAA7B,KACAmC,KAAA2H,OAAAoB,IAAAlL,GAAAmC,KAAA8H,OAAAjK,IAIAmC,KAAA2H,OAAAoB,IAAAhB,UAAA/H,KAAA8H,OAAAC,UAEA/H,KAAA2H,OAAAoB,IAAAE,OAAAtJ,EAAAG,EAAAH,EAAAI,GACA,QAAAlC,EAAA,EAAiBA,EAAAmC,KAAA6F,MAAA5E,OAAuBpD,IACxC8B,EAAAK,KAAA6F,MAAAhI,GAAAwG,GACArE,KAAA2H,OAAAoB,IAAAG,OAAAvJ,EAAAG,EAAAH,EAAAI,GAGAC,KAAA8H,OAAAqB,aAAgCnJ,KAAA2H,OAAAoB,IAAAK,SAChCpJ,KAAA2H,OAAAoB,IAAAM,OACArJ,KAAA2H,OAAAoB,IAAAO,aAMA5B,EAAAjI,UAAA8J,KAAA,WAEA,GAAAvJ,KAAA2H,OAAA6B,QAAAC,SAAAzJ,KAAA2H,OAAA+B,YACA1J,KAAA2H,OAAAoB,IAAAY,cAAA3J,KAAA2H,OAAA6B,QAAA1J,EAAAE,KAAA2H,OAAA6B,QAAAzJ,GAAA,CACA,IAAA0F,EAAA,MAEA,QAAA5H,EAAA,EAAqBA,EAAAmC,KAAA2H,OAAAtB,SAAApF,OAAiCpD,IAAA,CACtD,IAAAoC,EAAAD,KAAA2H,OAAAtB,SAAAxI,GAAAwF,SAAAP,WAAA9C,KAAA2H,OAAA6B,SAEAvJ,EAAAwF,IACAzF,KAAA2H,OAAA+B,WAAA1J,KAAA2H,OAAAtB,SAAAxI,GACA4H,EAAAxF,KAKA,IAAAD,KAAA2H,OAAA6B,QAAAC,SACAzJ,KAAA2H,OAAA+B,WAAA,OAIApM,EAAAD,QAAAqK,iBCxMApK,EAAAD,SACAuM,KAAA,KACAzK,OAAA,SAAA0K,GAEA,OADA7J,KAAA4J,KAAAC,EACA7J,MAOA8J,KAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,EAAAxJ,KAAAK,GACAoJ,EAAAH,GAAA,EACA,QAAAlM,EAAA,EAAAsM,EAAAnK,KAAA4J,KAAAvD,SAAApF,OAAkDpD,EAAAsM,EAAOtM,IAAA,CACzD,IAAA8B,EAAAK,KAAA4J,KAAAvD,SAAAxI,GAAAwF,SACA,IAAA1D,EAAAyK,OAAA,CACA,IAAAf,EAAA1J,EAAAqK,UAAA,QACAhK,KAAA4J,KAAAb,IAAAC,YACAhJ,KAAA4J,KAAAb,IAAAhB,UAAAsB,EACArJ,KAAA4J,KAAAb,IAAAsB,IAAA1K,EAAAG,EAAAH,EAAAI,EAAAmK,EAAA,EAAAD,GACAjK,KAAA4J,KAAAb,IAAAM,OACArJ,KAAA4J,KAAAb,IAAAO,eAUAgB,WAAA,SAAAC,EAAAP,GACAhK,KAAA4J,KAAAb,IAAAwB,QAAA,aACAvK,KAAA4J,KAAAb,IAAAhB,UAAAiC,GAAA,QACA,QAAAnM,EAAA,EAAmBA,EAAAmC,KAAA4J,KAAAvD,SAAApF,OAA+BpD,IAAA,CAClD,IAAA8B,EAAAK,KAAA4J,KAAAvD,SAAAxI,GAAAwF,SACArD,KAAA4J,KAAAb,IAAAyB,SAAA3M,EAAA8B,EAAAG,EAAA,EAAAH,EAAAI,EAAA,GAEAC,KAAA4J,KAAAb,IAAAM,QASAoB,MAAA,SAAAC,EAAAV,EAAAW,GAEA,GADAA,IAAsBA,GAAA,GACtB3K,KAAA4J,KAAArB,YAAAtH,OAAA,GACAjB,KAAA4J,KAAAb,IAAAC,YACAhJ,KAAA4J,KAAAb,IAAAI,YAAAa,GAAA,QACAhK,KAAA4J,KAAAb,IAAA6B,UAAAF,GAAA,EACA,QAAA7M,EAAA,EAAqBA,EAAAmC,KAAA4J,KAAArB,YAAAtH,OAAkCpD,IAAA,CACvD,IAAAK,EAAA8B,KAAA4J,KAAArB,YAAA1K,GACAK,EAAAkM,SACApK,KAAA4J,KAAAb,IAAAE,OAAA/K,EAAAmG,GAAAvE,EAAA5B,EAAAmG,GAAAtE,GACAC,KAAA4J,KAAAb,IAAAG,OAAAhL,EAAAoG,GAAAxE,EAAA5B,EAAAoG,GAAAvE,KAEA,IAAA4K,GACAzM,EAAAkM,SACApK,KAAA4J,KAAAb,IAAAE,OAAA/K,EAAAmG,GAAAvE,EAAA5B,EAAAmG,GAAAtE,GACAC,KAAA4J,KAAAb,IAAAG,OAAAhL,EAAAoG,GAAAxE,EAAA5B,EAAAoG,GAAAvE,IAIAC,KAAA4J,KAAAb,IAAAK,SACApJ,KAAA4J,KAAAb,IAAAO,cASAuB,cAAA,SAAAN,EAAAP,GACAhK,KAAA4J,KAAAb,IAAA+B,OACA9K,KAAA4J,KAAAb,IAAAwB,QAAA,aACAvK,KAAA4J,KAAAb,IAAAhB,UAAAiC,GAAA,QACA,QAAAnM,EAAA,EAAmBA,EAAAmC,KAAA4J,KAAAmB,OAAA9J,OAA6BpD,IAAA,CAChD,IAAA8B,EAAAK,KAAA4J,KAAAmB,OAAAlN,GACA,QAAAsM,EAAA,EAAqBA,EAAAxK,EAAA0G,SAAApF,OAAuBkJ,IAAA,CAC5C,IAAA3J,EAAAb,EAAA0G,SAAA8D,GAAA9G,SACArD,KAAA4J,KAAAb,IAAAyB,SAAA3M,EAAA,IAAAsM,EAAA3J,EAAAV,EAAA,GAAAU,EAAAT,EAAA,KAGAC,KAAA4J,KAAAb,IAAAM,OACArJ,KAAA4J,KAAAb,IAAAiC,WAOAC,aAAA,SAAAjB,GACAhK,KAAA4J,KAAAb,IAAAhB,UAAAiC,GAAA,QACAhK,KAAA4J,KAAAb,IAAAC,YACA,QAAAnL,EAAA,EAAmBA,EAAAmC,KAAA4J,KAAAmB,OAAA9J,OAA6BpD,IAAA,CAChD,IAAA+K,EAAA5I,KAAA4J,KAAAmB,OAAAlN,GACAmC,KAAA4J,KAAAb,IAAAmC,SAAAtC,EAAA3D,OAAAnF,EAAA,IAAA8I,EAAA3D,OAAAlF,EAAA,SAEAC,KAAA4J,KAAAb,IAAAM,OACArJ,KAAA4J,KAAAb,IAAAO,aAOA6B,YAAA,SAAAnB,GACAhK,KAAA4J,KAAAb,IAAAhB,UAAAiC,GAAA,kBACAhK,KAAA4J,KAAAb,IAAAC,YACA,QAAAnL,EAAA,EAAmBA,EAAAmC,KAAA4J,KAAAmB,OAAA9J,OAA6BpD,IAAA,CAChD,IAAA+K,EAAA5I,KAAA4J,KAAAmB,OAAAlN,GACAmC,KAAA4J,KAAAb,IAAAmC,SAAAtC,EAAA3D,OAAAnF,EAAA8I,EAAAtC,OAAAxG,EAAA8I,EAAA3D,OAAAlF,EAAA6I,EAAAtC,OAAAvG,EACA6I,EAAAtC,OAAAxG,EAAA8I,EAAAtC,OAAAxG,EAAA8I,EAAAtC,OAAAvG,EAAA6I,EAAAtC,OAAAvG,GAEAC,KAAA4J,KAAAb,IAAAM,OACArJ,KAAA4J,KAAAb,IAAAO,aAMA8B,YAAA,WACA,IAAAC,EAAA,aAAArL,KAAA4J,KAAAmB,OAAA9J,OACAqK,EAAA,cAAAtL,KAAA4J,KAAAvD,SAAApF,OACAsK,EAAA,iBAAAvL,KAAA4J,KAAArB,YAAAtH,OACAjB,KAAA4J,KAAAb,IAAAhB,UAAA,QACA/H,KAAA4J,KAAAb,IAAAwB,KAAA,aACAvK,KAAA4J,KAAAb,IAAAyB,SAAAa,EAAA,OACArL,KAAA4J,KAAAb,IAAAyB,SAAAc,EAAA,OACAtL,KAAA4J,KAAAb,IAAAyB,SAAAe,EAAA,0BCtIA,MAAAC,EAAA7N,EAAA,GACA+J,EAAA/J,EAAA,GACAgH,EAAAhH,EAAA,GACAwG,EAAAxG,EAAA,GACAqF,EAAArF,EAAA,GAmBA,SAAA8N,EAAAC,EAAAxH,EAAAF,EAAAL,EAAAD,EAAAiI,GACA3L,KAAA+D,OAAA6H,SAAAC,cAAAH,GACA1L,KAAAkE,SAAA,IACAlE,KAAAgE,UAAA,IACAhE,KAAA+D,OAAAG,MAAAlE,KAAAkE,MACAlE,KAAA+D,OAAAC,OAAAhE,KAAAgE,OACAhE,KAAA+I,IAAA/I,KAAA+D,OAAA+H,WAAA,MAEA9L,KAAA2D,aAAAqE,IAAArE,EAAA,EAAAA,EACA3D,KAAA0D,cAAAsE,IAAAtE,EAAA,GAAAA,EACA1D,KAAAiE,eAAA,GAEAjE,KAAA2L,gBAAA,GACA3L,KAAA+L,qBAAA,EACA/L,KAAAgM,mBAAAhM,KAAA2L,aAAA,EAEA3L,KAAA+K,UACA/K,KAAAqG,YACArG,KAAAuI,eAEAvI,KAAAiM,UAAA,IAAAtH,EAEA,MAAAiF,EAAA5J,KAGAA,KAAA0J,WAAA,KACA1J,KAAAwJ,SAAkB1J,EAAA,EAAAC,EAAA,EAAA0J,QAAA,GAClBzJ,KAAA+D,OAAAmI,iBAAA,gBAAAtC,EAAAJ,QAAAC,QAAA,GACAzJ,KAAA+D,OAAAmI,iBAAA,cAAAtC,EAAAJ,QAAAC,QAAA,GACAzJ,KAAA+D,OAAAmI,iBAAA,qBAAAC,GACAvC,EAAAJ,QAAA1J,EAAAqM,EAAAC,QACAxC,EAAAJ,QAAAzJ,EAAAoM,EAAAE,UAaArM,KAAAsM,MAUAC,IAAA,SAAAzM,EAAAC,EAAAyM,EAAAC,EAAArJ,GACA,IAAAwF,EAAA,IAAAlB,GACAX,KAAA3D,EAAA2D,KACAxG,MAAA6C,EAAA7C,MACA0H,OAAA7E,EAAA6E,SAAA,EACAH,OAAA1E,EAAA0E,OACAzB,UACAT,IAAe9F,IAAAC,KACf2M,IAAe5M,IAAA0M,EAAAzM,KACf4M,IAAe7M,IAAA0M,EAAAzM,IAAA0M,GACfG,IAAe9M,IAAAC,IAAA0M,IAEflE,cACA,eACA,eACA,eACA,eACA,YACA,aAEOqB,GAEP,OADAA,EAAAmB,OAAAzC,KAAAM,GACAA,GAWAiE,SAAA,SAAA/M,EAAAC,EAAAyM,EAAAC,EAAArJ,GACAoJ,GAAA,EACAC,GAAA,EACA,IAAA7D,EAAA,IAAAlB,GACA5H,IACAC,IACAgH,KAAA3D,EAAA2D,KACAkB,OAAA7E,EAAA6E,SAAA,EACAH,OAAA1E,EAAA0E,OACAzB,UACAyG,GAAchN,IAAA0M,EAAAzM,IAAA0M,GACdM,GAAcjN,IAAAC,IAAA0M,GACdO,GAAclN,IAAA0M,EAAAzM,IAAA0M,IAEdlE,cAAA,4BACOqB,GAEP,OADAA,EAAAmB,OAAAzC,KAAAM,GACAA,GAWAqE,OAAA,SAAAnN,EAAAC,EAAApB,EAAAuO,EAAA9J,GACA,IAAA+J,KACAC,KACA7M,EAAA,EACA8M,EAAA,EACA,QAAAxP,EAAA,EAAqBA,EAAAqP,EAAUrP,IAAA,CAC/B0C,GAAA,EAAAE,KAAAK,GAAAoM,EACA,IAAAI,EAAA7M,KAAAC,IAAA,GAAA/B,EACA4O,EAAA9M,KAAAE,IAAA,GAAAhC,EACAwO,EAAAtP,IACAiC,EAAAwN,EAAAxN,EAAAC,EAAAwN,EAAAxN,GAEAqN,EAAA9E,MACAzK,MAAAqP,IAAA,MAAAA,GAAA,IAEAE,EAAA9E,MACA,GAAAzK,EAAAqP,EAAA,GAAAA,GAAA,IAEAG,IAGAF,EAAAE,IAAqBvN,IAAAC,KAErB,QAAAlC,EAAA,EAAqBA,EAAAwP,EAAWxP,IAChCuP,EAAA9E,MACAzK,EAAAwP,GAAA,IAIA,IAAAzE,EAAA,IAAAlB,GACA5H,IACAC,IACAgH,KAAA3D,EAAA2D,KACAkB,OAAA7E,EAAA6E,SAAA,EACAH,OAAA1E,EAAA0E,OACAzB,SAAA8G,EACA5E,YAAA6E,GACOxD,GAEP,OADAA,EAAAmB,OAAAzC,KAAAM,GACAA,IAgBA5I,KAAAwN,OAAAhC,EAAArM,OAAAa,MA3LAyL,EAAA/D,OACA+D,EAAAzI,SACAyI,EAAAtH,aAyMAsH,EAAAhM,UAAAgO,UAAA,SAAA3N,EAAAC,EAAAoD,GACA,IAAAD,EAAA,IAAAuI,EAAAzI,OAAAhD,MAAwCF,IAAAC,KAAaoD,GACrDO,SAAA1D,KAAA0D,SACAC,QAAA3D,KAAA2D,QACAI,OAAA/D,KAAA+D,SAEA/D,KAAAqG,SAAAiC,KAAApF,IASAuI,EAAAhM,UAAAiO,cAAA,SAAA7P,EAAAsM,EAAA/F,GACA,IAAAoE,EAAA,IAAAiD,EAAAtH,WAAAnE,UAAAqG,SAAAxI,GAAAmC,KAAAqG,SAAA8D,GAAA/F,GACApE,KAAAuI,YAAAD,KAAAE,IAUAiD,EAAAhM,UAAAkO,MAAA,SAAAC,EAAA5D,GACAhK,KAAA6N,MAAA7D,IACAvM,OAAAqQ,uBACArQ,OAAAsQ,6BACAtQ,OAAAuQ,yBACAvQ,OAAAwQ,0BACAL,IASAnC,EAAAhM,UAAAoO,MAAA,SAAA7D,GACAhK,KAAA+I,IAAAmF,UAAA,IAAAlO,KAAA+D,OAAAG,MAAAlE,KAAA+D,OAAAC,QACAgG,IACAhK,KAAA+I,IAAAhB,UAAAiC,EACAhK,KAAA+I,IAAAmC,SAAA,IAAAlL,KAAA+D,OAAAG,MAAAlE,KAAA+D,OAAAC,UAYAyH,EAAAhM,UAAA0O,WAAA,SAAAC,EAAA5F,EAAApF,QACA4E,IAAA5E,UAEA,IAAAwF,EAAA,IAAA6C,EAAA/D,MACAX,KAAA,IAAA/F,UAAAC,OAAAuH,EAAAzB,KAAA3D,EAAA2D,KACAe,OAAA,IAAA9G,UAAAC,OAAAuH,EAAAV,OAAA1E,EAAA0E,OACAzB,SAAA+H,EACA7F,YAAAC,OACGxI,MAEH,OAAAgB,UAAAC,OAAA,CAEA,QAAApD,EAAA,EAAmBA,EAAA+K,EAAAvC,SAAApF,OAAuBpD,IAAA,CAC1C,IAAAwQ,EAAAzF,EAAAvC,SACAmC,EAAA,IAAAiD,EAAAtH,WAAAyE,IAAAvC,SAAAxI,GAAA+K,EAAAvC,UAAAxI,EAAA,GAAAwQ,EAAApN,SAAA,GACA2H,EAAA/C,MAAAyC,KAAAE,GACAxI,KAAAuI,YAAAD,KAAAE,GACAI,EAAAhB,SAIAgB,EAAAF,kBACA,IAAA4F,EAAA,IAAA7C,EAAAzI,OAAA4F,IAAA3D,QAAA,GACAvB,SAAA1D,KAAA0D,SACAC,QAAA3D,KAAA2D,QACAI,OAAA/D,KAAA+D,OACAE,eAAAjE,KAAAiE,iBAEA2E,EAAAvC,SAAAiC,KAAAgG,GACA1F,EAAAf,UAAAS,KAAAgG,EAAAjL,UACArD,KAAAqG,SAAAiC,KAAAgG,GACA1F,EAAAxC,SAKA,QAAAvI,EAAA,EAAmBA,EAAA+K,EAAAvC,SAAApF,OAAA,EAA2BpD,IAAA,CAC9C,IAAA2K,EAAA,IAAAiD,EAAAtH,WAAAyE,IAAAvC,SAAAxI,GAAA+K,EAAAvC,SAAAuC,EAAAvC,SAAApF,OAAA,OACA2H,EAAA/C,MAAAyC,KAAAE,GACAI,EAAAhB,SACA5H,KAAAuI,YAAAD,KAAAE,IAKA,OADAxI,KAAA+K,OAAAzC,KAAAM,GACAA,GAUA6C,EAAAhM,UAAA8D,UAAA,WACA,QAAA1F,EAAA,EAAiBA,EAAAmC,KAAAqG,SAAApF,OAA0BpD,IAC3CmC,KAAAqG,SAAAxI,GAAA0F,aASAkI,EAAAhM,UAAA8O,kBAAA,WAEA,QAAA1Q,EAAA,EAAiBA,EAAAmC,KAAAuI,YAAAtH,OAA6BpD,IAC9CmC,KAAAuI,YAAA1K,GAAA0G,SAQAkH,EAAAhM,UAAA+O,eAAA,WACA,QAAA3Q,EAAA,EAAiBA,EAAAmC,KAAAqG,SAAApF,OAA0BpD,IAC3CmC,KAAAqG,SAAAxI,GAAA+F,YAQA6H,EAAAhM,UAAAgP,gBAAA,WAEA,QAAA5Q,EAAA,EAAiBA,EAAAmC,KAAA+K,OAAA9J,OAAwBpD,IACzCmC,KAAA+K,OAAAlN,GAAA6K,kBAIA,QAAA7K,EAAA,EAAiBA,EAAAmC,KAAA+K,OAAA9J,OAAA,EAA4BpD,IAAA,CAC7C,IAAA6Q,EAAA1O,KAAA+K,OAAAlN,GACA,QAAAsM,EAAAtM,EAAA,EAAuBsM,EAAAnK,KAAA+K,OAAA9J,OAAwBkJ,IAAA,CAC/C,IAAAwE,EAAA3O,KAAA+K,OAAAZ,GACAnK,KAAAiM,UAAA7E,KAAAsH,EAAAC,IACA3O,KAAAiM,UAAA5G,IAAAqJ,EAAAC,IACA3O,KAAAiM,UAAA1F,QAAAvG,KAAA0D,aAUA+H,EAAAhM,UAAAmP,OAAA,WACA5O,KAAAuD,YAEA,QAAAjE,EAAA,EAAiBA,EAAAU,KAAA2L,aAAuBrM,IAAA,CACxC,QAAA6K,EAAA,EAAmBA,EAAAnK,KAAA+L,qBAA+B5B,IAClDnK,KAAAwO,iBACAxO,KAAAuO,oBAEAvO,KAAAyO,oBAWAhD,EAAAhM,UAAAqI,OAAA,WACA,QAAAjK,EAAA,EAAiBA,EAAAmC,KAAA+K,OAAA9J,OAAwBpD,IACzCmC,KAAA+K,OAAAlN,GAAAiL,OACA9I,KAAA+K,OAAAlN,GAAA0L,QAWAkC,EAAAhM,UAAA8J,KAAA,WACA,GAAAvJ,KAAA0J,WAAA,CAEA1J,KAAA+I,IAAAC,YACAhJ,KAAA+I,IAAAE,OAAAjJ,KAAA0J,WAAArG,SAAAvD,EAAAE,KAAA0J,WAAArG,SAAAtD,GACAC,KAAA+I,IAAAG,OAAAlJ,KAAAwJ,QAAA1J,EAAAE,KAAAwJ,QAAAzJ,GACAC,KAAA+I,IAAAI,YAAA,OACAnJ,KAAA+I,IAAAK,SAGA,IAAAxJ,EAAA,EAAAI,KAAA0J,WAAAzG,OAAA8D,KACA/G,KAAA0J,WAAArG,SAAAvD,IAAAE,KAAAwJ,QAAA1J,EAAAE,KAAA0J,WAAArG,SAAAvD,GAAAF,EACAI,KAAA0J,WAAArG,SAAAtD,IAAAC,KAAAwJ,QAAAzJ,EAAAC,KAAA0J,WAAArG,SAAAtD,GAAAH,IAWA6L,EAAAhM,UAAAoP,UACAC,IAAA,KACAC,OAAA,EACAC,UAAA,KACAC,YAEAxD,EAAAhM,UAAAyP,QAAA,SAAAC,GAGA,IAAArP,OAAAkI,KAFAmH,SAEArP,EAAAqP,EAAArP,EAAA,GACAC,OAAAiI,IAAAmH,EAAApP,EAAAoP,EAAApP,EAAA,GACAqP,OAAApH,IAAAmH,EAAAC,YAAAD,EAAAC,YAAA,EAEAC,EAAA,IAAAC,KACA,IAAAtP,KAAA6O,SAAAG,UAGA,OAFAhP,KAAA6O,SAAAG,UAAAK,EAAAE,eACAvP,KAAA6O,SAAAC,IAAA,GAIA,IAAAU,GAAAH,EAAAE,UAAAvP,KAAA6O,SAAAG,WAAA,IACAK,EAAAE,UAAAvP,KAAA6O,SAAAG,UACAhP,KAAA6O,SAAAG,UAAAK,EAAAE,UAIAvP,KAAA6O,SAAAE,SACA/O,KAAA6O,SAAAE,OAAAK,IACApP,KAAA6O,SAAAE,OAAA,GAIA,IAAA/O,KAAA6O,SAAAE,SACA/O,KAAA6O,SAAAC,KAAA,EAAAU,GAAAC,QAAA,IAIA,IAAAzF,EAAAmF,EAAAO,WAAA,QACA1P,KAAA6O,SAAAC,IAAA,KAA+B9E,EAAA,UAC/BhK,KAAA6O,SAAAC,IAAA,KAA+B9E,EAAA,OAE/BhK,KAAA6O,SAAAI,QAAA3G,MACAxI,IAAAE,KAAA6O,SAAA,OACA9O,EAAAC,KAAA6O,SAAAC,IAAA,EACA9E,UAGAhK,KAAA6O,SAAAI,QAAAhO,OAAA,IACAjB,KAAA6O,SAAAI,QAAAU,QAIA,IAAA5G,EAAA/I,KAAA+I,IAuCA,OAtCA,WACAA,EAAAC,YAGAD,EAAAhB,UAAAoH,EAAA,oBACApG,EAAAI,YAAA,QACAJ,EAAA6B,UAAA,GACA7B,EAAAmC,SAAApL,EAAA,EAAAC,EAAA,UACAgJ,EAAA6G,WAAA9P,EAAA,EAAAC,EAAA,UACAgJ,EAAAM,OACAN,EAAAK,SAGAL,EAAAhB,UAAAoH,EAAAU,WAAA,OACA9G,EAAAwB,KAAA4E,EAAA5E,MAAA,aACAxB,EAAAyB,SAAA,SAAAxK,KAAA6O,SAAAC,IAAAhP,EAAAC,EAAA,IAGAgJ,EAAA+B,OACA/B,EAAAtG,MAAA,MACA,QAAA5E,EAAA,EAAmBA,EAAAmC,KAAA6O,SAAAI,QAAAhO,OAAkCpD,IACrDkL,EAAAhB,UAAA/H,KAAA6O,SAAAI,QAAApR,GAAAmM,MACAhK,KAAA6O,SAAAI,QAAApR,GAAAiC,GAAA,EACAiJ,EAAAmC,SAAAlL,KAAA6O,SAAAI,QAAApR,GAAAiC,EAAA,MAAAC,EAAA,IAAAC,KAAA6O,SAAAI,QAAApR,GAAAkC,GAEAgJ,EAAAiC,UAGAjC,EAAAI,YAAA,UACAJ,EAAAE,OAAAnJ,EAAAC,EAAA,IACAgJ,EAAAG,OAAApJ,EAAA,GAAAC,EAAA,IACAgJ,EAAA6B,UAAA,EACA7B,EAAAK,SAEAL,EAAAO,aAEAtL,KAAAgC,KAAA,MAEAA,KAAA6O,SAAAC,KAGAxR,EAAAD,QAAAoO,mBC/gBAnO,EAAAD,QAAAM,EAAA","file":"atomic.build.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Atomic\"] = factory();\n\telse\n\t\troot[\"Atomic\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/**\r\n * Vector.js v1.0.0\r\n * @author Anurag Hazra\r\n * @borrows p5.Vector\r\n * @param {number} x \r\n * @param {number} y \r\n */\r\nfunction Vector(x, y) {\r\n  this.x = x || 0;\r\n  this.y = y || 0;\r\n}\r\n\r\n// Static Functions\r\nVector.dist = function (v1, v2) {\r\n  return v1.dist(v2);\r\n}\r\nVector.sub = function (v1, v2) {\r\n  return new Vector(v1.x - v2.x, v1.y - v2.y);\r\n};\r\nVector.add = function (v1, v2) {\r\n  return new Vector(v1.x + v2.x, v1.y + v2.y);\r\n};\r\nVector.fromAngle = function (angle) {\r\n  let v = new Vector(0, 0);\r\n  v.x = Math.cos(angle);\r\n  v.y = Math.sin(angle);\r\n  return v;\r\n}\r\nVector.random2D = function (v) {\r\n  return Vector.fromAngle(Math.random() * Math.PI * 180);\r\n}\r\n\r\nVector.prototype = {\r\n  set: function(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  },\r\n  add: function (x, y) {\r\n    if (arguments.length === 1) {\r\n      this.x += x.x;\r\n      this.y += x.y;\r\n    } else if (arguments.length === 2) {\r\n      this.x += x;\r\n      this.y += y;\r\n    }\r\n    return this;\r\n  },\r\n  sub: function (x, y) {\r\n    if (x instanceof Vector) {\r\n      this.x -= x.x;\r\n      this.y -= x.y;\r\n    } else {\r\n      this.x -= x;\r\n      this.y -= y;\r\n    }\r\n    return this;\r\n  },\r\n  sub2 : function(v0, v1) {\r\n    this.x = v0.x - v1.x;\r\n    this.y = v0.y - v1.y;\r\n    return this;\r\n  },\r\n  mult: function (v) {\r\n    if (typeof v === 'number') {\r\n      this.x *= v;\r\n      this.y *= v;\r\n    } else {\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n    }\r\n    return this;\r\n  },\r\n  div: function (v) {\r\n    if (typeof v === 'number') {\r\n      this.x /= v;\r\n      this.y /= v;\r\n    } else {\r\n      this.x /= v.x;\r\n      this.y /= v.y;\r\n    }\r\n    return this;\r\n  },\r\n  mag: function () {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  },\r\n  magSq: function () {\r\n    return (this.x * this.x + this.y * this.y);\r\n  },\r\n  setMag: function (value) {\r\n    this.normalize();\r\n    this.mult(value);\r\n    return this;\r\n  },\r\n  normalize: function () {\r\n    let m = this.mag();\r\n    if (m > 0) {\r\n      this.div(m);\r\n    }\r\n    return this;\r\n  },\r\n  limit: function (max) {\r\n    if (this.mag() > max) {\r\n      this.normalize();\r\n      this.mult(max);\r\n    }\r\n    return this;\r\n  },\r\n  heading: function () {\r\n    return (-Math.atan2(-this.y, this.x));\r\n  },\r\n  dist: function (v) {\r\n    let dx = this.x - v.x;\r\n    let dy = this.y - v.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n  copy: function () {\r\n    return new Vector(this.x, this.y);\r\n  },\r\n  negative: function () {\r\n    this.x = -this.x;\r\n    this.y = -this.y;\r\n    return this;\r\n  },\r\n  array: function () {\r\n    return [this.x, this.y];\r\n  },\r\n  toString: function () {\r\n    return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \"]\";\r\n  },\r\n  unit: function() {\r\n    return this.div(this.mag());\r\n  },\r\n  subtract: function(v) {\r\n    return new Vector(this.x - v, this.y - v);\r\n  },\r\n  dot: function(v) {\r\n    return this.x * v.x + this.y * v.y;\r\n  },\r\n  scale: function(v, s) {\r\n    this.x = v.x * s;\r\n    this.y = v.y * s;\r\n    return this;\r\n  },\r\n  normal: function(v0, v1) {\r\n    // perpendicular\r\n    var nx = v0.y - v1.y,\r\n      ny = v1.x - v0.x;\r\n    // normalize\r\n    var len = 1.0 / Math.sqrt(nx * nx + ny * ny);\r\n    this.x = nx * len;\r\n    this.y = ny * len;\r\n    return this;\r\n  },\r\n  copy: function(v) {\r\n    this.x = v.x;\r\n    this.y = v.y;\r\n    return this;\r\n  },\r\n  squareDist: function(v) {\r\n    var dx = this.x - v.x;\r\n    var dy = this.y - v.y;\r\n    return (dx * dx + dy * dy);\r\n  },\r\n  perp: function(v) {\r\n    this.x = -v.y;\r\n    this.y = v.x;\r\n    return this;\r\n  },\r\n}\r\n\r\nmodule.exports = Vector;","const Vector = require('./Vector');\r\n\r\n/**\r\n * @class Vertex\r\n * @param {*} parent \r\n * @param {*} vertex \r\n * @param {*} pinned \r\n */\r\nfunction Vertex(parent, vertex, pinned, opt) {\r\n  this.opt = opt;\r\n  this.parent = parent;\r\n  this.position = new Vector(vertex.x, vertex.y);\r\n  this.oldPosition = new Vector(vertex.x, vertex.y);\r\n  this.pinned = pinned;\r\n};\r\n\r\n/**\r\n * @method Vertex.integrate()\r\n * Loop and update physics\r\n */\r\nVertex.prototype.integrate = function () {\r\n  if (!this.pinned) {\r\n    let pos = this.position;\r\n    let oldpos = this.oldPosition;\r\n    let x = pos.x;\r\n    let y = pos.y;\r\n\r\n    pos.x += (pos.x - oldpos.x) * this.opt.friction;\r\n    pos.y += (pos.y - oldpos.y) * this.opt.friction + this.opt.gravity;\r\n    oldpos.set(x, y);\r\n  }\r\n};\r\n\r\n/**\r\n * @method Vertex.boundary()\r\n * Handle Boundry Collision\r\n */\r\nVertex.prototype.boundary = function () {\r\n  let pos = this.position,\r\n      old = this.oldPosition;\r\n  let vx = (pos.x - old.x);\r\n  let vy = (pos.y - old.y);\r\n\r\n  // Y\r\n  if (pos.y < 0) {\r\n    pos.y = 0;\r\n  } else if (pos.y > this.opt.canvas.height) {\r\n    pos.x -= (pos.y - this.opt.canvas.height) * vx * this.opt.groundFriction;\r\n    pos.y = this.opt.canvas.height;\r\n  }\r\n\r\n  // X\r\n  if (pos.x < 0) {\r\n    pos.x = 0\r\n  } else if (pos.x > this.opt.canvas.width) {\r\n    pos.x = this.opt.canvas.width\r\n  };\r\n}\r\n\r\nmodule.exports = Vertex;\r\n","/**\r\n * @class Constraint\r\n * @param {*} parent \r\n * @param {*} v0 \r\n * @param {*} v1 \r\n * @param {*} edge \r\n */\r\nfunction Constraint(parent, v0, v1, edge) {\r\n  this.parent = parent;\r\n  this.v0 = v0;\r\n  this.v1 = v1;\r\n  this.p0 = v0.position;\r\n  this.p1 = v1.position;\r\n  this.edge = edge;\r\n  this.dist = Math.sqrt(this.p0.squareDist(this.p1));\r\n};\r\n\r\n\r\n/**\r\n * @method Constraint.solve()\r\n * Solve Constrints\r\n */\r\nConstraint.prototype.solve = function () {\r\n  let dx = this.p1.x - this.p0.x;\r\n  let dy = this.p1.y - this.p0.y;\r\n  let d = Math.sqrt(dx * dx + dy * dy);\r\n\r\n  // using square root approximation\r\n\r\n  // let delta = this.dist / (dx * dx + dy * dy + this.dist) - 0.5;\r\n  // dx *= delta;\r\n  // dy *= delta;\r\n  // // console.log(this.v0)\r\n  // if (!this.v0.pinned) {\r\n  //   this.p0.x -= dx;\r\n  //   this.p0.y -= dy;\r\n  // }\r\n  // if (!this.v1.pinned) {\r\n  //   this.p1.x += dx;\r\n  //   this.p1.y += dy;\r\n  // }\r\n\r\n  const diffrence = (d - this.dist) / d;\r\n  const adjustX = (dx * 0.5 * diffrence) /*stfns*/;\r\n  const adjustY = (dy * 0.5 * diffrence) /*stfns*/;\r\n\r\n  this.p0.x += adjustX;\r\n  this.p0.y += adjustY;\r\n  this.p1.x -= adjustX;\r\n  this.p1.y -= adjustY;\r\n}\r\n\r\nmodule.exports = Constraint;","const Vector = require('./Vector');\r\n\r\n/**\r\n * @class Collision\r\n * Collision Detection Class\r\n */\r\nfunction Collision() {\r\n  this.testAxis = new Vector(0, 0);\r\n  this.response = new Vector(0, 0);\r\n  this.relTanVel = new Vector(0, 0);\r\n  this.tangent = new Vector(0, 0);\r\n  this.relVel = new Vector(0, 0);\r\n  this.center = new Vector(0, 0);\r\n  this.axis = new Vector(0, 0);\r\n  this.line = new Vector(0, 0);\r\n  this.depth = 0;\r\n  this.edge = null;\r\n  this.vertex = null;\r\n}\r\n\r\n/**\r\n * SAT Collision Detection\r\n * @method Collision.SAT\r\n * @param {Body} B0\r\n * @param {Body} B1\r\n */\r\nCollision.prototype.SAT = function (B0, B1) {\r\n  // no aabb overlap performance optimization\r\n  this.checkAABB(B1, B0);\r\n  \r\n  let minDistance = Number.MAX_SAFE_INTEGER;\r\n  const n0 = B0.edges.length;\r\n  const n1 = B1.edges.length;\r\n\r\n  // Iterate through all of the edges of both bodies\r\n  for (let i = 0, n = n0 + n1; i < n; i++) {\r\n    // get edge\r\n    let edge = i < n0 ? B0.edges[i] : B1.edges[i - n0];\r\n\r\n    \r\n    // Calculate the perpendicular to this edge and normalize it\r\n    this.testAxis.normal(edge.p0, edge.p1);\r\n\r\n    // Project both bodies onto the normal\r\n    B0.project(this.testAxis);\r\n    B1.project(this.testAxis);\r\n\r\n    //Calculate the distance between the two intervals\r\n    const dist = B0.min < B1.min ? B1.min - B0.max : B0.min - B1.max;\r\n\r\n    // If the intervals don't overlap, return, since there is no collision\r\n    if (dist > 0) {\r\n      return false;\r\n    } else if (Math.abs(dist) < minDistance) {\r\n      // Save collision information\r\n      minDistance = Math.abs(dist);\r\n      this.axis.copy(this.testAxis);\r\n      this.edge = edge;\r\n    }\r\n  }\r\n\r\n  // save penetration depth\r\n  this.depth = minDistance;\r\n\r\n  // Ensure collision edge in B1 and collision vertex in B0\r\n  // console.log(this.edge.parent)\r\n  if (this.edge.parent != B1) {\r\n    const t = B1;\r\n    B1 = B0;\r\n    B0 = t;\r\n  }\r\n\r\n  // Make sure that the collision normal is pointing at B1\r\n  // let n = this.center.sub2(B0.center, B1.center).dot(this.axis);\r\n  const xx = B0.center.x - B1.center.x;\r\n  const yy = B0.center.y - B1.center.y;\r\n  const n = this.axis.x * xx + this.axis.y * yy;\r\n\r\n\r\n  // Revert the collision normal if it points away from B1\r\n  if (n < 0) {\r\n    this.axis.negative()\r\n  }\r\n\r\n  let smallestDist = Number.MAX_SAFE_INTEGER, v, dist;\r\n  for (let i = 0; i < B0.vCount; i++) {\r\n    // Measure the distance of the vertex from the line using the line equation\r\n    v = B0.vertices[i];\r\n    this.line.sub2(v.position, B1.center);\r\n    dist = this.axis.dot(this.line);\r\n    // Set the smallest distance and the collision vertex\r\n    if (dist < smallestDist) {\r\n      smallestDist = dist;\r\n      this.vertex = v;\r\n    }\r\n  }\r\n\r\n  // There is no separating axis. Report a collision!\r\n  return true;\r\n}\r\n\r\nCollision.prototype.checkAABB = function(B1, B0) {\r\n  if (\r\n    !(0 > Math.abs(B1.center.x - B0.center.x) - (B1.halfEx.x + B0.halfEx.x) &&\r\n      0 > Math.abs(B1.center.y - B0.center.y) - (B1.halfEx.y + B0.halfEx.y))\r\n  ) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Resolve Collision based on SAT Given Collision Information\r\n * @method Collision.resolve()\r\n * @param {float} friction\r\n */\r\nCollision.prototype.resolve = function (friction) {\r\n  // cache vertices positions\r\n  let p0 = this.edge.p0,\r\n    p1 = this.edge.p1,\r\n    o0 = this.edge.v0.oldPosition,\r\n    o1 = this.edge.v1.oldPosition,\r\n    vp = this.vertex.position,\r\n    vo = this.vertex.oldPosition,\r\n    rs = this.response;\r\n\r\n  this.response.scale(this.axis, this.depth);\r\n\r\n\r\n  // calculate where on the edge the collision vertex lies\r\n  let t = Math.abs(p0.x - p1.x) > Math.abs(p0.y - p1.y)\r\n    ? (vp.x - rs.x - p0.x) / (p1.x - p0.x)\r\n    : (vp.y - rs.y - p0.y) / (p1.y - p0.y);\r\n  // lambda math\r\n  let lambda = 1 / (t * t + (1 - t) * (1 - t));\r\n\r\n  // calculate mass\r\n  let m0 = this.vertex.parent.mass,\r\n      m1 = this.edge.parent.mass,\r\n      tm = m0 + m1;\r\n\r\n  m0 = m0 / tm;\r\n  m1 = m1 / tm;\r\n\r\n  // apply the collision response\r\n  p0.x -= rs.x * (1 - t) * lambda * m0;\r\n  p0.y -= rs.y * (1 - t) * lambda * m0;\r\n  p1.x -= rs.x * t * lambda * m0;\r\n  p1.y -= rs.y * t * lambda * m0;\r\n  vp.x += rs.x * m1;\r\n  vp.y += rs.y * m1;\r\n\r\n\r\n  //\r\n  // collision friction\r\n  //\r\n\r\n  // compute relative velocity\r\n  this.relVel.set(\r\n    vp.x - vo.x - (p0.x + p1.x - o0.x - o1.x) * 0.5,\r\n    vp.y - vo.y - (p0.y + p1.y - o0.y - o1.y) * 0.5\r\n  );\r\n\r\n  // axis perpendicular\r\n  this.tangent.perp(this.axis);\r\n\r\n  // // project the relative velocity onto tangent\r\n  let relTv = this.relVel.dot(this.tangent);\r\n  let rt = this.relTanVel.set(this.tangent.x * relTv, this.tangent.y * relTv);\r\n\r\n  // // apply tangent friction\r\n  let groundf = 0.95;\r\n  vo.x += rt.x * groundf * m1;\r\n  vo.y += rt.y * groundf * m1;\r\n\r\n  o0.x -= rt.x * (1 - t) * groundf * lambda * m0;\r\n  o0.y -= rt.y * (1 - t) * groundf * lambda * m0;\r\n  o1.x -= rt.x * t * groundf * lambda * m0;\r\n  o1.y -= rt.y * t * groundf * lambda * m0;\r\n\r\n}\r\n\r\nCollision.prototype.aabb = function (B0, B1) {\r\n  return (B0.bound.minX <= B1.bound.maxX) &&\r\n         (B0.bound.minY <= B1.bound.maxY) && \r\n         (B0.bound.maxX >= B1.bound.minX) && \r\n         (B1.bound.maxY >= B0.bound.minY);\r\n}\r\n\r\nmodule.exports = Collision;\r\n","const Vector = require('./Vector');\r\nconst Constraint = require('./Constraint');\r\nconst Vertex = require('./Vertex');\r\n\r\n/**\r\n * @class Body\r\n * @constructor Body\r\n * @param {object} opt \r\n */\r\nfunction Body(opt, engine) {\r\n  this.vCount = 0;\r\n  this.eCount = 0;\r\n  this.min = 0;\r\n  this.max = 0;\r\n  this.vertices = [];\r\n  this.positions = [];\r\n  this.edges = [];\r\n  this.bound = {};\r\n  this.center = new Vector(0, 0);\r\n  this.halfEx = new Vector(0, 0);\r\n  this.engine = engine;\r\n\r\n  this.render = opt.render || { fillStyle: 'black' };\r\n  this.mass = (opt.mass == undefined) ? 1 : opt.mass;\r\n  this.static = (opt.static || false);\r\n  this.angle = opt.angle || 0;\r\n\r\n  if (this.static) {\r\n    this.mass = Number.MAX_SAFE_INTEGER;\r\n  }\r\n\r\n  // SVG POLYGON\r\n  // loop through opt.vertices and add them to array\r\n  if (typeof opt.vertices === 'string') {\r\n    let arr = opt.vertices.split(' ');\r\n    let svgVertices = {};\r\n    for (let i = 0; i < arr.length; i++) {\r\n      svgVertices[i] = { x: Number(arr[i].split(',')[0]), y: Number(arr[i].split(',')[1]) }\r\n    }\r\n    // opt.svgVertices = arr;\r\n    opt.vertices = svgVertices;\r\n  }\r\n\r\n\r\n  // VERTICES\r\n  for (let n in opt.vertices) {\r\n    let vertex = new Vertex(this, opt.vertices[n], this.static, {\r\n      friction: this.engine.friction,\r\n      gravity: this.engine.gravity,\r\n      canvas: this.engine.canvas,\r\n      groundFriction : this.engine.groundFriction\r\n    });\r\n    opt.vertices[n].compiled = vertex;\r\n    this.vertices.push(vertex);\r\n    this.positions.push(vertex.position);\r\n    this.engine.vertices.push(vertex);\r\n    this.vCount++;\r\n  }\r\n\r\n  // CONSTRAINTS\r\n  // loop through opt.constraints and add them to array\r\n  for (let i = 0; i < opt.constraints.length; i++) {\r\n    let cons = opt.constraints[i];\r\n\r\n    let constraint = new Constraint(\r\n      this, //parent\r\n      opt.vertices[cons[0]].compiled, // v0\r\n      opt.vertices[cons[1]].compiled, // v1\r\n      (cons[2] || false)\r\n    );\r\n\r\n    if (constraint.edge) {\r\n      this.edges.push(constraint);\r\n      this.eCount++;\r\n    }\r\n    this.engine.constraints.push(constraint);\r\n  }\r\n\r\n  if (this.angle !== 0) {\r\n    // this.vertices.push(vertex);\r\n    // this.positions.push(vertex.position);\r\n    // this.engine.vertices.push(vertex);\r\n    // this.vCount++;\r\n    for (let i = 0; i < this.vertices.length; i++) {\r\n      let angle = this.angle / 180 * Math.PI;\r\n      this.calculateCenter();\r\n      this.vertices[i].position.x = (this.vertices[i].position.x * Math.cos(angle)) - (this.vertices[i].position.y * Math.sin(angle));\r\n      this.vertices[i].position.y = (this.vertices[i].position.x * Math.sin(angle)) + (this.vertices[i].position.y * Math.cos(angle));\r\n      this.vertices[i].oldPosition.x = this.vertices[i].position.x;\r\n      this.vertices[i].oldPosition.y = this.vertices[i].position.y;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @method Body.calculateCenter()\r\n * calculateCenter and bounding box\r\n */\r\nBody.prototype.calculateCenter = function () {\r\n  let minX = Number.MAX_SAFE_INTEGER,\r\n      minY = Number.MAX_SAFE_INTEGER,\r\n      maxX = -Number.MAX_SAFE_INTEGER,\r\n      maxY = -Number.MAX_SAFE_INTEGER;\r\n\r\n  for (let i = 0; i < this.vertices.length; i++) {\r\n    let p = this.positions[i];\r\n\r\n    if (p.x > maxX) maxX = p.x;\r\n    if (p.y > maxY) maxY = p.y;\r\n    if (p.x < minX) minX = p.x;\r\n    if (p.y < minY) minY = p.y;\r\n  }\r\n\r\n  // center\r\n  this.center.set( (minX + maxX) * 0.5, (minY + maxY) * 0.5 );\r\n\r\n  // half extents\r\n  this.halfEx.set((maxX - minX) * 0.5, (maxY - minY) * 0.5);\r\n\r\n  this.bound = { minX, minY, maxX, maxY };\r\n};\r\n\r\n/**\r\n * get the vector projection on to normal (n)\r\n * @method Body.Project()\r\n * @param {vector} n\r\n */\r\nBody.prototype.project = function (n) {\r\n  function dot(a, b) {\r\n    return a.x * b.x + a.y * b.y;\r\n  }\r\n  // setup a starting value\r\n  let proj = dot(this.vertices[0].position, n);\r\n  let min = max = proj;\r\n\r\n  for (let i = 0; i < this.vertices.length; i++) {\r\n    let p = this.vertices[i].position;\r\n    //project onto each axis\r\n    proj = dot(p, n);\r\n    if (proj < min) { min = proj }\r\n    if (proj > max) { max = proj }\r\n  }\r\n  this.min = min;\r\n  this.max = max\r\n};\r\n\r\n/**\r\n * draw body\r\n * @method Body.draw()\r\n * @param {*} ctx \r\n */\r\nBody.prototype.draw = function () {\r\n  this.engine.ctx.beginPath();\r\n  let p = this.edges[0].p0;\r\n\r\n  for (let i in this.render) {\r\n    if (this.render.hasOwnProperty(i)) {\r\n      this.engine.ctx[i] = this.render[i];\r\n    }\r\n  }\r\n\r\n  this.engine.ctx.fillStyle = this.render.fillStyle;\r\n\r\n  this.engine.ctx.moveTo(p.x, p.y);\r\n  for (let i = 1; i < this.edges.length; i++) {\r\n    p = this.edges[i].p0;\r\n    this.engine.ctx.lineTo(p.x, p.y);\r\n  }\r\n\r\n  if (this.render.strokeStyle) { this.engine.ctx.stroke() };\r\n  this.engine.ctx.fill();\r\n  this.engine.ctx.closePath();\r\n};\r\n\r\n/**\r\n * @method Body.drag()\r\n */\r\nBody.prototype.drag = function () {\r\n  // drag\r\n  if (this.engine.pointer.isDown && !this.engine.dragVertex) {\r\n    if (this.engine.ctx.isPointInPath(this.engine.pointer.x, this.engine.pointer.y)) {\r\n      let minDistance = 99999;\r\n\r\n      for (let i = 0; i < this.engine.vertices.length; i++) {\r\n        let dist = this.engine.vertices[i].position.squareDist(this.engine.pointer);\r\n\r\n        if (dist < minDistance) {\r\n          this.engine.dragVertex = this.engine.vertices[i];\r\n          minDistance = dist;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (this.engine.pointer.isDown === false) {\r\n    this.engine.dragVertex = null;\r\n  }\r\n}\r\n\r\nmodule.exports = Body;","module.exports = {\r\n  self: null,\r\n  create: function (slf) {\r\n    this.self = slf;\r\n    return this;\r\n  },\r\n  /**\r\n   * @method Atomic.Render.dots()\r\n   * @param {number} radius\r\n   * @param {string} color\r\n   */\r\n  dots: function (radius, color) {\r\n    let PI2 = Math.PI * 2;\r\n    let rad = radius || 4;\r\n    for (let i = 0, j = this.self.vertices.length; i < j; i++) {\r\n      let p = this.self.vertices[i].position;\r\n      if (!p.hidden) {\r\n        let fill = (p.color || color || 'black');\r\n        this.self.ctx.beginPath();\r\n        this.self.ctx.fillStyle = fill;\r\n        this.self.ctx.arc(p.x, p.y, rad, 0, PI2);\r\n        this.self.ctx.fill();\r\n        this.self.ctx.closePath();\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.pointIndex()\r\n   * @param {string} font\r\n   * @param {stirng} color\r\n   */\r\n  pointIndex: function (font, color) {\r\n    this.self.ctx.font = font || '10px Arial';\r\n    this.self.ctx.fillStyle = color || 'black';\r\n    for (let i = 0; i < this.self.vertices.length; i++) {\r\n      let p = this.self.vertices[i].position;\r\n      this.self.ctx.fillText(i, (p.x - 5), (p.y - 5));\r\n    }\r\n    this.self.ctx.fill();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.lines()\r\n   * @param {number} linewidth\r\n   * @param {string} color\r\n   * @param {boolean} showHidden\r\n   */\r\n  lines: function (linewidth, color, showHidden) {\r\n    if (!showHidden) { showHidden = false; }\r\n    if (this.self.constraints.length > 0) {\r\n      this.self.ctx.beginPath();\r\n      this.self.ctx.strokeStyle = (color || 'black');\r\n      this.self.ctx.lineWidth = linewidth || 1;\r\n      for (let i = 0; i < this.self.constraints.length; i++) {\r\n        let c = this.self.constraints[i];\r\n        if (!c.hidden) {\r\n          this.self.ctx.moveTo(c.p0.x, c.p0.y);\r\n          this.self.ctx.lineTo(c.p1.x, c.p1.y);\r\n        }\r\n        if (showHidden === true) {\r\n          if (c.hidden) {\r\n            this.self.ctx.moveTo(c.p0.x, c.p0.y);\r\n            this.self.ctx.lineTo(c.p1.x, c.p1.y);\r\n          }\r\n        }\r\n      }\r\n      this.self.ctx.stroke();\r\n      this.self.ctx.closePath();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.indexOfBodies()\r\n   * @param {string} font\r\n   * @param {string} color\r\n   */\r\n  indexOfBodies: function (font, color) {\r\n    this.self.ctx.save();\r\n    this.self.ctx.font = font || '10px Arial';\r\n    this.self.ctx.fillStyle = color || 'black';\r\n    for (let i = 0; i < this.self.bodies.length; i++) {\r\n      let p = this.self.bodies[i];\r\n      for (let j = 0; j < p.vertices.length; j++) {\r\n        let v = p.vertices[j].position;\r\n        this.self.ctx.fillText(i + '.' + j, (v.x - 10), (v.y - 10));\r\n      }\r\n    }\r\n    this.self.ctx.fill();\r\n    this.self.ctx.restore();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.renderCenterOfMass()\r\n   * @param {string} color\r\n   */\r\n  centerOfMass: function (color) {\r\n    this.self.ctx.fillStyle = color || 'black';\r\n    this.self.ctx.beginPath();\r\n    for (let i = 0; i < this.self.bodies.length; i++) {\r\n      let b = this.self.bodies[i];\r\n      this.self.ctx.fillRect(b.center.x - 2.5, b.center.y - 2.5, 5, 5);\r\n    }\r\n    this.self.ctx.fill();\r\n    this.self.ctx.closePath();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.boundingBox()\r\n   * @param {string} color\r\n   */\r\n  boundingBox: function (color) {\r\n    this.self.ctx.fillStyle = color || 'rgba(0,0,0,0.2)';\r\n    this.self.ctx.beginPath();\r\n    for (let i = 0; i < this.self.bodies.length; i++) {\r\n      let b = this.self.bodies[i];\r\n      this.self.ctx.fillRect(b.center.x - b.halfEx.x, b.center.y - b.halfEx.y,\r\n        b.halfEx.x + b.halfEx.x, b.halfEx.y + b.halfEx.y);\r\n    }\r\n    this.self.ctx.fill();\r\n    this.self.ctx.closePath();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.information()\r\n   */\r\n  information: function () {\r\n    let stat = 'Objects : ' + this.self.bodies.length;\r\n    let stat2 = 'Vertices : ' + this.self.vertices.length;\r\n    let stat3 = 'Constraints : ' + this.self.constraints.length;\r\n    this.self.ctx.fillStyle = 'black';\r\n    this.self.ctx.font = '14px Arial'\r\n    this.self.ctx.fillText(stat, 10, 20);\r\n    this.self.ctx.fillText(stat2, 10, 40);\r\n    this.self.ctx.fillText(stat3, 10, 60);\r\n  }\r\n}","const Renderer = require('./Renderer');\r\nconst Body = require('./Body');\r\nconst Collision = require('./Collision');\r\nconst Constraint = require('./Constraint');\r\nconst Vertex = require('./Vertex');\r\n\r\nAtomic.Body = Body;\r\nAtomic.Vertex = Vertex;\r\nAtomic.Constraint = Constraint;\r\n\r\n/**\r\n * Atomic.js\r\n * @description Greatly Simple 2D Physics Engine\r\n * @version v1.2.0\r\n * @author Anurag Hazra <hazru.anurag@gmail.com>\r\n * @constructor new Atomic()\r\n * @param {*} id \r\n * @param {*} width \r\n * @param {*} height \r\n * @param {*} gravity \r\n * @param {*} friction \r\n * @param {*} simIteration \r\n */\r\nfunction Atomic(id, width, height, gravity, friction, simIteration) {\r\n  this.canvas = document.querySelector(id);\r\n  this.width = width || 200;\r\n  this.height = height || 200;\r\n  this.canvas.width = this.width;\r\n  this.canvas.height = this.height;\r\n  this.ctx = this.canvas.getContext('2d');\r\n\r\n  this.gravity = (gravity === undefined) ? 1 : gravity;\r\n  this.friction = (friction === undefined) ? 0.1 : friction;\r\n  this.groundFriction = 0.1;\r\n\r\n  this.simIteration = (simIteration || 10);\r\n  this.constraintIterations = 1;\r\n  this.collisionIteration = this.simIteration / 2;\r\n\r\n  this.bodies = [];\r\n  this.vertices = [];\r\n  this.constraints = [];\r\n\r\n  this.collision = new Collision();\r\n\r\n  const self = this;\r\n\r\n  // init drag\r\n  this.dragVertex = null;\r\n  this.pointer = { x: 0, y: 0, isDown: false };\r\n  this.canvas.addEventListener('mousedown', () => self.pointer.isDown = true)\r\n  this.canvas.addEventListener('mouseup', () => self.pointer.isDown = false)\r\n  this.canvas.addEventListener('mousemove', function (e) {\r\n    self.pointer.x = e.offsetX;\r\n    self.pointer.y = e.offsetY;\r\n  })\r\n\r\n\r\n  // Poly Primitives\r\n  /**\r\n   *  predifined methods for creating models \r\n   * \tfunctions => > box(),\r\n   *               > triangle(),\r\n   *               > circle()\r\n   *  @method Poly\r\n   *  @type object\r\n   */\r\n  this.Poly = {\r\n    /**\r\n     * Create A Box\r\n     * @method Atomic.Poly.box()\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} w\r\n     * @param {number} h\r\n     * @param {object} opt\r\n     */\r\n    box: function (x, y, w, h, opt) {\r\n      var b = new Body({\r\n        mass: opt.mass,\r\n        angle: opt.angle,\r\n        static: (opt.static || false),\r\n        render: opt.render,\r\n        vertices: {\r\n          n0: { x: x, y: y },\r\n          n1: { x: x + w, y: y },\r\n          n2: { x: x + w, y: y + h },\r\n          n3: { x: x, y: y + h }\r\n        },\r\n        constraints: [\r\n          [\"n0\", \"n1\", true],\r\n          [\"n1\", \"n2\", true],\r\n          [\"n2\", \"n3\", true],\r\n          [\"n3\", \"n0\", true],\r\n          [\"n0\", \"n2\"],\r\n          [\"n3\", \"n1\"]\r\n        ]\r\n      }, self);\r\n      self.bodies.push(b);\r\n      return b;\r\n    },\r\n    /**\r\n     * Create A Triangle\r\n     * @method Atomic.Poly.triangle()\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} w\r\n     * @param {number} h\r\n     * @param {object} opt\r\n     */\r\n    triangle: function (x, y, w, h, opt) {\r\n      w /= 2;\r\n      h /= 2;\r\n      var b = new Body({\r\n        x: x,\r\n        y: y,\r\n        mass: opt.mass,\r\n        static: (opt.static || false),\r\n        render: opt.render,\r\n        vertices: {\r\n          0: { x: x - w, y: y + h },\r\n          1: { x: x, y: y - h },\r\n          2: { x: x + w, y: y + h }\r\n        },\r\n        constraints: [[0, 1, true], [1, 2, true], [2, 0, true]]\r\n      }, self);\r\n      self.bodies.push(b);\r\n      return b;\r\n    },\r\n    /**\r\n     * Create A Cricle\r\n     * @method Atomic.Poly.circle()\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} r\r\n     * @param {number} segs\r\n     * @param {object} opt\r\n     */\r\n    circle: function (x, y, r, segs, opt) {\r\n      let tmpV = {};\r\n      let tmpC = [];\r\n      let angle = 0;\r\n      let index = 0;\r\n      for (let i = 0; i < segs; i++) {\r\n        angle += Math.PI * 2 / segs;\r\n        let outer = (Math.cos((angle)) * r);\r\n        let inner = (Math.sin((angle)) * r);\r\n        tmpV[i] = {\r\n          x: outer + x, y: inner + y\r\n        }\r\n        tmpC.push([\r\n          i, ((i + (segs - segs / 2 + 2)) % segs), true\r\n        ]);\r\n        tmpC.push([\r\n          (i), ((i + segs - 1) % segs), false\r\n        ]);\r\n        index++;\r\n      }\r\n\r\n      tmpV[index] = { x: x, y: y };\r\n\r\n      for (let i = 0; i < index; i++) {\r\n        tmpC.push([\r\n          i, index, false\r\n        ])\r\n      }\r\n\r\n      var b = new Body({\r\n        x: x,\r\n        y: y,\r\n        mass: opt.mass,\r\n        static: (opt.static || false),\r\n        render: opt.render,\r\n        vertices: tmpV,\r\n        constraints: tmpC\r\n      }, self);\r\n      self.bodies.push(b);\r\n      return b;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Common Rendering Methods\r\n   * @functions => > dots(),\r\n   *               > pointIndex(),\r\n   *               > lines(),\r\n   *               > indexOfBodies(),\r\n   *               > centerOfMass(),\r\n   *               > boundingBox()\r\n   * @type Object\r\n   */\r\n  this.Render = Renderer.create(this);\r\n}\r\n\r\n\r\n\r\n/****************************/\r\n/***** ATOMIC PROTOTYPES ****/\r\n/****************************/\r\n\r\n\r\n/**\r\n * @method Atomic.addVertex()\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {boolean} pinned\r\n */\r\nAtomic.prototype.addVertex = function (x, y, pinned) {\r\n  let vertex = new Atomic.Vertex(this, { x: x, y: y }, pinned, {\r\n    friction: this.friction,\r\n    gravity: this.gravity,\r\n    canvas: this.canvas,\r\n  });\r\n  this.vertices.push(vertex);\r\n}\r\n\r\n/**\r\n * @method Atomic.addConstraint()\r\n * @param {number} i\r\n * @param {number} j\r\n * @param {boolean} edge\r\n */\r\nAtomic.prototype.addConstraint = function (i, j, edge) {\r\n  let cons = new Atomic.Constraint(this, this.vertices[i], this.vertices[j], edge);\r\n  this.constraints.push(cons);\r\n}\r\n\r\n\r\n/**\r\n * requestAnimationFrame\r\n * @method Atomic.frame()\r\n * @param {function} func \r\n * @param {string} color \r\n */\r\nAtomic.prototype.frame = function (func, color) {\r\n  this.clear(color);\r\n  let frame = window.requestAnimationFrame\r\n    || window.webkitRequestAnimationFrame\r\n    || window.msRequestAnimationFrame\r\n    || window.mozRequestAnimationFrame;\r\n  frame(func);\r\n}\r\n\r\n\r\n/**\r\n * Clear the canvas\r\n * @method Atomic.clear()\r\n * @param {string} color \r\n */\r\nAtomic.prototype.clear = function (color) {\r\n  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  if (color) {\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @method Atomic.createPoly()\r\n * Creates a polygon\r\n * @param {array|string} vert \r\n * @param {array} cons optional (calculates cneter point) \r\n * @param {object} opt \r\n */\r\nAtomic.prototype.createPoly = function (vert, cons, opt) {\r\n  if (opt === undefined) opt = {};\r\n\r\n  let b = new Atomic.Body({\r\n    mass: (arguments.length === 2) ? cons.mass : opt.mass,\r\n    render: (arguments.length === 2) ? cons.render : opt.render,\r\n    vertices: vert,\r\n    constraints: (cons || [])\r\n  }, this);\r\n\r\n  if (arguments.length === 2) {\r\n    // join outer vertex\r\n    for (let i = 0; i < b.vertices.length; i++) {\r\n      let bvert = b.vertices;\r\n      let cons = new Atomic.Constraint(b, b.vertices[i], b.vertices[(i + 1) % bvert.length], true);\r\n      b.edges.push(cons);\r\n      this.constraints.push(cons);\r\n      b.eCount++;\r\n    }\r\n\r\n    // add center vertex\r\n    b.calculateCenter();\r\n    let centerVertex = new Atomic.Vertex(b, b.center, false, {\r\n      friction: this.friction,\r\n      gravity: this.gravity,\r\n      canvas: this.canvas,\r\n      groundFriction: this.groundFriction\r\n    });\r\n    b.vertices.push(centerVertex);\r\n    b.positions.push(centerVertex.position);\r\n    this.vertices.push(centerVertex);\r\n    b.vCount++;\r\n    \r\n\r\n\r\n    // join to center vertex\r\n    for (let i = 0; i < b.vertices.length - 1; i++) {\r\n      let cons = new Atomic.Constraint(b, b.vertices[i], b.vertices[b.vertices.length - 1], false);\r\n      b.edges.push(cons);\r\n      b.eCount++;\r\n      this.constraints.push(cons)\r\n    }\r\n  }\r\n\r\n  this.bodies.push(b);\r\n  return b;\r\n}\r\n\r\n\r\n/** Physics Simulation Update */\r\n\r\n/**\r\n * @method Atomic.integrate()\r\n * updates vertices\r\n */\r\nAtomic.prototype.integrate = function () {\r\n  for (let i = 0; i < this.vertices.length; i++) {\r\n    this.vertices[i].integrate();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @method Atomic.updateConstraints()\r\n * solves all verlet physics \r\n */\r\nAtomic.prototype.updateConstraints = function () {\r\n  // solve constrains\r\n  for (let i = 0; i < this.constraints.length; i++) {\r\n    this.constraints[i].solve();\r\n  }\r\n}\r\n\r\n/**\r\n * @method Atomic.updateBoundary()\r\n * handles all bodies boundary collisions\r\n */\r\nAtomic.prototype.updateBoundary = function () {\r\n  for (let i = 0; i < this.vertices.length; i++) {\r\n    this.vertices[i].boundary();\r\n  }\r\n}\r\n\r\n/**\r\n * @method Atomic.updateCollision()\r\n * Batch Update Collisions\r\n */\r\nAtomic.prototype.updateCollision = function () {\r\n  // Recalculate the bounding boxes\r\n  for (let i = 0; i < this.bodies.length; i++) {\r\n    this.bodies[i].calculateCenter();\r\n  }\r\n\r\n  // // collisions detection\r\n  for (let i = 0; i < this.bodies.length - 1; i++) {\r\n    let b0 = this.bodies[i];\r\n    for (let j = i + 1; j < this.bodies.length; j++) {\r\n      let b1 = this.bodies[j];\r\n      if (this.collision.aabb(b0, b1)) {\r\n        this.collision.SAT(b0, b1)\r\n          && this.collision.resolve(this.friction);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @method Atomic.update()\r\n * Solve All Collision And Update\r\n */\r\nAtomic.prototype.update = function () {\r\n  this.integrate();\r\n\r\n  for (let n = 0; n < this.simIteration; n++) {\r\n    for (let j = 0; j < this.constraintIterations; j++) {\r\n      this.updateBoundary();\r\n      this.updateConstraints();\r\n    }\r\n    this.updateCollision();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * draw all bodies\r\n * @method Atomic.render()\r\n */\r\nAtomic.prototype.render = function () {\r\n  for (let i = 0; i < this.bodies.length; i++) {\r\n    this.bodies[i].draw();\r\n    this.bodies[i].drag();\r\n  }\r\n};\r\n\r\n\r\n// Utils\r\n\r\n/**\r\n * @method Atomic.drag()\r\n * drag Poly Objects\r\n */\r\nAtomic.prototype.drag = function () {\r\n  if (this.dragVertex) {\r\n    // draw mouse link\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(this.dragVertex.position.x, this.dragVertex.position.y);\r\n    this.ctx.lineTo(this.pointer.x, this.pointer.y);\r\n    this.ctx.strokeStyle = \"#000\";\r\n    this.ctx.stroke();\r\n\r\n    // correct position\r\n    var s = this.dragVertex.parent.mass * 1;\r\n    this.dragVertex.position.x += (this.pointer.x - this.dragVertex.position.x) / s;\r\n    this.dragVertex.position.y += (this.pointer.y - this.dragVertex.position.y) / s;\r\n  }\r\n};\r\n\r\n\r\n\r\n/**\r\n * shows current framerate \r\n * @method Atomic.showFps()\r\n * @param {object} option \r\n */\r\nAtomic.prototype.fpsScope = {\r\n  fps: null,\r\n  bar_vx: 0,\r\n  lastframe: null,\r\n  fpsBars: []\r\n};\r\nAtomic.prototype.showFps = function (option) {\r\n  option = (!option) ? {} : option;\r\n\r\n  let x = (option.x !== undefined) ? option.x : 10;\r\n  let y = (option.y !== undefined) ? option.y : 10;\r\n  let updateSpeed = (option.updateSpeed !== undefined) ? option.updateSpeed : 3;\r\n\r\n  let date = new Date();\r\n  if (!this.fpsScope.lastframe) {\r\n    this.fpsScope.lastframe = date.valueOf();\r\n    this.fpsScope.fps = 0;\r\n    return;\r\n  }\r\n\r\n  let delta = (date.valueOf() - this.fpsScope.lastframe) / 1000;\r\n  let frametime = (date.valueOf() - this.fpsScope.lastframe);\r\n  this.fpsScope.lastframe = date.valueOf();\r\n\r\n\r\n  //bar_vx variable for moving bars in x axis\r\n  this.fpsScope.bar_vx++;\r\n  if (this.fpsScope.bar_vx > updateSpeed) {\r\n    this.fpsScope.bar_vx = 0;\r\n  }\r\n\r\n  //if bar_vx variable is equal to 1 then roundup the fps\r\n  if (this.fpsScope.bar_vx === 0) {\r\n    this.fpsScope.fps = (1 / delta).toFixed(1);\r\n  }\r\n\r\n  //render\r\n  let color = option.barsColor || 'green';\r\n  if (this.fpsScope.fps < 40) { color = 'orange' };\r\n  if (this.fpsScope.fps < 20) { color = 'red'; };\r\n\r\n  this.fpsScope.fpsBars.push({\r\n    x: x + (this.fpsScope.bar_vx),\r\n    y: this.fpsScope.fps / 2,\r\n    color: color\r\n  });\r\n\r\n  if (this.fpsScope.fpsBars.length > 87) {\r\n    this.fpsScope.fpsBars.shift();\r\n  }\r\n\r\n\r\n  let ctx = this.ctx;\r\n  function drawFpsMeter() {\r\n    ctx.beginPath();\r\n\r\n    //bounds\r\n    ctx.fillStyle = (option.background) || 'white';\r\n    ctx.strokeStyle = 'black';\r\n    ctx.lineWidth = 0.5;\r\n    ctx.fillRect(x - 5, y - 5, 100, 60);\r\n    ctx.strokeRect(x - 5, y - 5, 100, 60);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n\r\n    //fps\r\n    ctx.fillStyle = option.fontColor || '#555';\r\n    ctx.font = option.font || '10px Arial';\r\n    ctx.fillText('FPS : ' + this.fpsScope.fps, x, y + 10);\r\n\r\n    //bars\r\n    ctx.save();\r\n    ctx.scale(1, -1); //rotate\r\n    for (let i = 0; i < this.fpsScope.fpsBars.length; i++) {\r\n      ctx.fillStyle = this.fpsScope.fpsBars[i].color;\r\n      this.fpsScope.fpsBars[i].x += 1;\r\n      ctx.fillRect(this.fpsScope.fpsBars[i].x - 2, -50 - y, 1.2, this.fpsScope.fpsBars[i].y);\r\n    }\r\n    ctx.restore();\r\n\r\n    //60fps line\r\n    ctx.strokeStyle = 'crimson';\r\n    ctx.moveTo(x, y + 20);\r\n    ctx.lineTo(x + 90, y + 20);\r\n    ctx.lineWidth = 1;\r\n    ctx.stroke();\r\n\r\n    ctx.closePath();\r\n  }\r\n  drawFpsMeter.call(this, null);\r\n\r\n  return this.fpsScope.fps;\r\n}\r\n\r\nmodule.exports = Atomic;","module.exports = require('./Atomic');\r\n"],"sourceRoot":""}