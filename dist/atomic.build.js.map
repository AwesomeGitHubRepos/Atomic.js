{"version":3,"sources":["webpack://Atomic/webpack/universalModuleDefinition","webpack://Atomic/webpack/bootstrap","webpack://Atomic/./src/Atomic.js","webpack://Atomic/./src/Body.js","webpack://Atomic/./src/Collision.js","webpack://Atomic/./src/Constraint.js","webpack://Atomic/./src/Renderer.js","webpack://Atomic/./src/Vector.js","webpack://Atomic/./src/Vertex.js","webpack://Atomic/./src/app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,iBAAiB,mBAAO,CAAC,qCAAY;AACrC,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,kBAAkB,mBAAO,CAAC,uCAAa;AACvC,mBAAmB,mBAAO,CAAC,yCAAc;AACzC,eAAe,mBAAO,CAAC,iCAAU;;;AAGjC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B,iBAAiB,iBAAiB;AAClC,iBAAiB,qBAAqB;AACtC,iBAAiB;AACjB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC,gBAAgB,iBAAiB;AACjC,gBAAgB;AAChB,WAAW;AACX;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,aAAa,MAAM;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA,yBAAyB,wBAAwB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,qBAAqB,kCAAkC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wB;;;;;;;;;;;AC9dA,eAAe,mBAAO,CAAC,iCAAU;AACjC,mBAAmB,mBAAO,CAAC,yCAAc;AACzC,eAAe,mBAAO,CAAC,iCAAU;;AAEjC;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iCAAiC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA,sB;;;;;;;;;;;AC3LA,eAAe,mBAAO,CAAC,iCAAU;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AClJA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,4B;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA,qBAAqB,kCAAkC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;ACxIA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,wB;;;;;;;;;;;AC3KA,eAAe,mBAAO,CAAC,iCAAU;;AAEjC;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;;;;;;;;;AC9DA,iBAAiB,mBAAO,CAAC,iCAAU","file":"atomic.build.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Atomic\"] = factory();\n\telse\n\t\troot[\"Atomic\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/app.js\");\n","const Renderer = require('./Renderer');\r\nconst Body = require('./Body');\r\nconst Collision = require('./Collision');\r\nconst Constraint = require('./Constraint');\r\nconst Vertex = require('./Vertex');\r\n\r\n\r\n/**\r\n * Atomic.js\r\n * @description Greatly Simple 2D Physics Engine\r\n * @version v1.2.0\r\n * @author Anurag Hazra <hazru.anurag@gmail.com>\r\n * @constructor new Atomic()\r\n * @param {*} id\r\n * @param {*} width\r\n * @param {*} height\r\n * @param {*} gravity\r\n * @param {*} friction\r\n * @param {*} simIteration\r\n */\r\nclass Atomic {\r\n\r\n  constructor(id, width, height, gravity, friction, simIteration) {\r\n    this.canvas = document.querySelector(id);\r\n    this.width = width || 200;\r\n    this.height = height || 200;\r\n    this.canvas.width = this.width;\r\n    this.canvas.height = this.height;\r\n    this.ctx = this.canvas.getContext('2d');\r\n    this.gravity = (gravity === undefined) ? 1 : gravity;\r\n    this.friction = (friction === undefined) ? 0.1 : friction;\r\n    this.groundFriction = 0.1;\r\n    this.simIteration = (simIteration || 10);\r\n    this.constraintIterations = 1;\r\n    this.collisionIteration = this.simIteration / 2;\r\n    this.bodies = [];\r\n    this.vertices = [];\r\n    this.constraints = [];\r\n    this.collision = new Collision();\r\n\r\n    // init drag\r\n    this.dragVertex = null;\r\n    this.pointer = { x: 0, y: 0, isDown: false };\r\n    this.canvas.addEventListener('mousedown', () => this.pointer.isDown = true);\r\n    this.canvas.addEventListener('mouseup', () => this.pointer.isDown = false);\r\n    this.canvas.addEventListener('mousemove', (e) => {\r\n      this.pointer.x = e.offsetX;\r\n      this.pointer.y = e.offsetY;\r\n    });\r\n\r\n    \r\n    // Poly Primitives\r\n    /**\r\n     *  predifined methods for creating models\r\n     * \tfunctions => > box(),\r\n     *               > triangle(),\r\n     *               > circle()\r\n     *  @method Poly\r\n     *  @type object\r\n     */\r\n    this.Poly = {\r\n      /**\r\n       * Create A Box\r\n       * @method Atomic.Poly.box()\r\n       * @param {number} x\r\n       * @param {number} y\r\n       * @param {number} w\r\n       * @param {number} h\r\n       * @param {object} opt\r\n       */\r\n      box: (x, y, w, h, opt) => {\r\n        var b = new Body({\r\n          mass: opt.mass,\r\n          angle: opt.angle,\r\n          static: (opt.static || false),\r\n          render: opt.render,\r\n          vertices: {\r\n            n0: { x: x, y: y },\r\n            n1: { x: x + w, y: y },\r\n            n2: { x: x + w, y: y + h },\r\n            n3: { x: x, y: y + h }\r\n          },\r\n          constraints: [\r\n            [\"n0\", \"n1\", true],\r\n            [\"n1\", \"n2\", true],\r\n            [\"n2\", \"n3\", true],\r\n            [\"n3\", \"n0\", true],\r\n            [\"n0\", \"n2\"],\r\n            [\"n3\", \"n1\"]\r\n          ]\r\n        }, this);\r\n        this.bodies.push(b);\r\n        return b;\r\n      },\r\n      /**\r\n       * Create A Triangle\r\n       * @method Atomic.Poly.triangle()\r\n       * @param {number} x\r\n       * @param {number} y\r\n       * @param {number} w\r\n       * @param {number} h\r\n       * @param {object} opt\r\n       */\r\n      triangle: (x, y, w, h, opt) => {\r\n        w /= 2;\r\n        h /= 2;\r\n        var b = new Body({\r\n          x: x,\r\n          y: y,\r\n          mass: opt.mass,\r\n          static: (opt.static || false),\r\n          render: opt.render,\r\n          vertices: {\r\n            0: { x: x - w, y: y + h },\r\n            1: { x: x, y: y - h },\r\n            2: { x: x + w, y: y + h }\r\n          },\r\n          constraints: [[0, 1, true], [1, 2, true], [2, 0, true]]\r\n        }, this);\r\n        this.bodies.push(b);\r\n        return b;\r\n      },\r\n      /**\r\n       * Create A Cricle\r\n       * @method Atomic.Poly.circle()\r\n       * @param {number} x\r\n       * @param {number} y\r\n       * @param {number} r\r\n       * @param {number} segs\r\n       * @param {object} opt\r\n       */\r\n      circle: (x, y, r, segs, opt) => {\r\n        let tmpV = {};\r\n        let tmpC = [];\r\n        let angle = 0;\r\n        let index = 0;\r\n        for (let i = 0; i < segs; i++) {\r\n          angle += Math.PI * 2 / segs;\r\n          let outer = (Math.cos((angle)) * r);\r\n          let inner = (Math.sin((angle)) * r);\r\n          tmpV[i] = {\r\n            x: outer + x, y: inner + y\r\n          };\r\n          tmpC.push([\r\n            i, ((i + (segs - segs / 2 + 2)) % segs), true\r\n          ]);\r\n          tmpC.push([\r\n            (i), ((i + segs - 1) % segs), false\r\n          ]);\r\n          index++;\r\n        }\r\n        tmpV[index] = { x: x, y: y };\r\n        for (let i = 0; i < index; i++) {\r\n          tmpC.push([\r\n            i, index, false\r\n          ]);\r\n        }\r\n        var b = new Body({\r\n          x: x,\r\n          y: y,\r\n          mass: opt.mass,\r\n          static: (opt.static || false),\r\n          render: opt.render,\r\n          vertices: tmpV,\r\n          constraints: tmpC\r\n        }, this);\r\n        this.bodies.push(b);\r\n        return b;\r\n      }\r\n    };\r\n    /**\r\n     * Common Rendering Methods\r\n     * @functions => > dots(),\r\n     *               > pointIndex(),\r\n     *               > lines(),\r\n     *               > indexOfBodies(),\r\n     *               > centerOfMass(),\r\n     *               > boundingBox()\r\n     * @type Object\r\n     */\r\n    this.Render = Renderer.create(this);\r\n  }\r\n  \r\n  /**\r\n   * @method Atomic.addVertex()\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {boolean} pinned\r\n   */\r\n  addVertex(x, y, pinned) {\r\n    let vertex = new Atomic.Vertex(this, { x: x, y: y }, pinned, {\r\n      friction: this.friction,\r\n      gravity: this.gravity,\r\n      canvas: this.canvas,\r\n      engine: this\r\n    });\r\n    this.vertices.push(vertex);\r\n  }\r\n  \r\n  /**\r\n   * @method Atomic.addConstraint()\r\n   * @param {number} i\r\n   * @param {number} j\r\n   * @param {boolean} edge\r\n   */\r\n  addConstraint(i, j, edge) {\r\n    let cons = new Atomic.Constraint(this, this.vertices[i], this.vertices[j], edge);\r\n    this.constraints.push(cons);\r\n  }\r\n  \r\n  /**\r\n   * requestAnimationFrame\r\n   * @method Atomic.frame()\r\n   * @param {function} func\r\n   * @param {string} color\r\n   */\r\n  frame(func, color) {\r\n    this.clear(color);\r\n    let frame = window.requestAnimationFrame\r\n      || window.webkitRequestAnimationFrame\r\n      || window.msRequestAnimationFrame\r\n      || window.mozRequestAnimationFrame;\r\n    frame(func);\r\n  }\r\n\r\n  /**\r\n   * Clear the canvas\r\n   * @method Atomic.clear()\r\n   * @param {string} color\r\n   */\r\n  clear(color) {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    if (color) {\r\n      this.ctx.fillStyle = color;\r\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Atomic.createPoly()\r\n   * Creates a polygon\r\n   * @param {array|string} vert\r\n   * @param {array} cons optional (calculates cneter point)\r\n   * @param {object} opt\r\n   */\r\n  createPoly(vert, cons, opt) {\r\n    if (opt === undefined)\r\n      opt = {};\r\n    let b = new Atomic.Body({\r\n      mass: (arguments.length === 2) ? cons.mass : opt.mass,\r\n      render: (arguments.length === 2) ? cons.render : opt.render,\r\n      vertices: vert,\r\n      constraints: (cons || [])\r\n    }, this);\r\n    if (arguments.length === 2) {\r\n      // join outer vertex\r\n      for (let i = 0; i < b.vertices.length; i++) {\r\n        let bvert = b.vertices;\r\n        let cons = new Atomic.Constraint(b, b.vertices[i], b.vertices[(i + 1) % bvert.length], true);\r\n        b.edges.push(cons);\r\n        this.constraints.push(cons);\r\n        b.eCount++;\r\n      }\r\n      // add center vertex\r\n      b.calculateCenter();\r\n      let centerVertex = new Atomic.Vertex(b, b.center, false, {\r\n        friction: this.friction,\r\n        canvas: this.canvas,\r\n        groundFriction: this.groundFriction,\r\n        engine: this\r\n      });\r\n      b.vertices.push(centerVertex);\r\n      b.positions.push(centerVertex.position);\r\n      this.vertices.push(centerVertex);\r\n      b.vCount++;\r\n      // join to center vertex\r\n      for (let i = 0; i < b.vertices.length - 1; i++) {\r\n        let cons = new Atomic.Constraint(b, b.vertices[i], b.vertices[b.vertices.length - 1], false);\r\n        b.edges.push(cons);\r\n        b.eCount++;\r\n        this.constraints.push(cons);\r\n      }\r\n    }\r\n    this.bodies.push(b);\r\n    return b;\r\n  }\r\n\r\n  /** Physics Simulation Update */\r\n  /**\r\n   * @method Atomic.integrate()\r\n   * updates vertices\r\n   */\r\n  integrate() {\r\n    for (let i = 0; i < this.vertices.length; i++) {\r\n      this.vertices[i].integrate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Atomic.updateConstraints()\r\n   * solves all verlet physics\r\n   */\r\n  updateConstraints() {\r\n    // solve constrains\r\n    for (let i = 0; i < this.constraints.length; i++) {\r\n      this.constraints[i].solve();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Atomic.updateBoundary()\r\n   * handles all bodies boundary collisions\r\n   */\r\n  updateBoundary() {\r\n    for (let i = 0; i < this.vertices.length; i++) {\r\n      this.vertices[i].boundary();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method Atomic.updateCollision()\r\n   * Batch Update Collisions\r\n   */\r\n  updateCollision() {\r\n    // Recalculate the bounding boxes\r\n    for (let i = 0; i < this.bodies.length; i++) {\r\n      this.bodies[i].calculateCenter();\r\n    }\r\n    // // collisions detection\r\n    for (let i = 0; i < this.bodies.length - 1; i++) {\r\n      let b0 = this.bodies[i];\r\n      for (let j = i + 1; j < this.bodies.length; j++) {\r\n        let b1 = this.bodies[j];\r\n        if (this.collision.aabb(b0, b1)) {\r\n          this.collision.SAT(b0, b1)\r\n            && this.collision.resolve(this.friction);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @method Atomic.update()\r\n   * Solve All Collision And Update\r\n   */\r\n  update() {\r\n    this.integrate();\r\n    for (let n = 0; n < this.simIteration; n++) {\r\n      for (let j = 0; j < this.constraintIterations; j++) {\r\n        this.updateBoundary();\r\n        this.updateConstraints();\r\n      }\r\n      this.updateCollision();\r\n    }\r\n  }\r\n  /**\r\n   * draw all bodies\r\n   * @method Atomic.render()\r\n   */\r\n  render() {\r\n    for (let i = 0; i < this.bodies.length; i++) {\r\n      this.bodies[i].draw();\r\n      this.bodies[i].drag();\r\n    }\r\n  }\r\n\r\n\r\n  // Utils\r\n  /**\r\n   * @method Atomic.drag()\r\n   * drag Poly Objects\r\n   */\r\n  drag() {\r\n    if (this.dragVertex) {\r\n      // draw mouse link\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(this.dragVertex.position.x, this.dragVertex.position.y);\r\n      this.ctx.lineTo(this.pointer.x, this.pointer.y);\r\n      this.ctx.strokeStyle = \"#000\";\r\n      this.ctx.stroke();\r\n      // correct position\r\n      var s = this.dragVertex.parent.mass * 1;\r\n      this.dragVertex.position.x += (this.pointer.x - this.dragVertex.position.x) / s;\r\n      this.dragVertex.position.y += (this.pointer.y - this.dragVertex.position.y) / s;\r\n    }\r\n  }\r\n  showFps(option) {\r\n    option = (!option) ? {} : option;\r\n    let x = (option.x !== undefined) ? option.x : 10;\r\n    let y = (option.y !== undefined) ? option.y : 10;\r\n    let updateSpeed = (option.updateSpeed !== undefined) ? option.updateSpeed : 3;\r\n    let date = new Date();\r\n    if (!this.fpsScope.lastframe) {\r\n      this.fpsScope.lastframe = date.valueOf();\r\n      this.fpsScope.fps = 0;\r\n      return;\r\n    }\r\n    let delta = (date.valueOf() - this.fpsScope.lastframe) / 1000;\r\n    let frametime = (date.valueOf() - this.fpsScope.lastframe);\r\n    this.fpsScope.lastframe = date.valueOf();\r\n    //bar_vx variable for moving bars in x axis\r\n    this.fpsScope.bar_vx++;\r\n    if (this.fpsScope.bar_vx > updateSpeed) {\r\n      this.fpsScope.bar_vx = 0;\r\n    }\r\n    //if bar_vx variable is equal to 1 then roundup the fps\r\n    if (this.fpsScope.bar_vx === 0) {\r\n      this.fpsScope.fps = (1 / delta).toFixed(1);\r\n    }\r\n    //render\r\n    let color = option.barsColor || 'green';\r\n    if (this.fpsScope.fps < 40) {\r\n      color = 'orange';\r\n    }\r\n    if (this.fpsScope.fps < 20) {\r\n      color = 'red';\r\n    }\r\n    this.fpsScope.fpsBars.push({\r\n      x: x + (this.fpsScope.bar_vx),\r\n      y: this.fpsScope.fps / 2,\r\n      color: color\r\n    });\r\n    if (this.fpsScope.fpsBars.length > 87) {\r\n      this.fpsScope.fpsBars.shift();\r\n    }\r\n    let ctx = this.ctx;\r\n    function drawFpsMeter() {\r\n      ctx.beginPath();\r\n      //bounds\r\n      ctx.fillStyle = (option.background) || 'white';\r\n      ctx.strokeStyle = 'black';\r\n      ctx.lineWidth = 0.5;\r\n      ctx.fillRect(x - 5, y - 5, 100, 60);\r\n      ctx.strokeRect(x - 5, y - 5, 100, 60);\r\n      ctx.fill();\r\n      ctx.stroke();\r\n      //fps\r\n      ctx.fillStyle = option.fontColor || '#555';\r\n      ctx.font = option.font || '10px Arial';\r\n      ctx.fillText('FPS : ' + this.fpsScope.fps, x, y + 10);\r\n      //bars\r\n      ctx.save();\r\n      ctx.scale(1, -1); //rotate\r\n      for (let i = 0; i < this.fpsScope.fpsBars.length; i++) {\r\n        ctx.fillStyle = this.fpsScope.fpsBars[i].color;\r\n        this.fpsScope.fpsBars[i].x += 1;\r\n        ctx.fillRect(this.fpsScope.fpsBars[i].x - 2, -50 - y, 1.2, this.fpsScope.fpsBars[i].y);\r\n      }\r\n      ctx.restore();\r\n      //60fps line\r\n      ctx.strokeStyle = 'crimson';\r\n      ctx.moveTo(x, y + 20);\r\n      ctx.lineTo(x + 90, y + 20);\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n    }\r\n    drawFpsMeter.call(this, null);\r\n    return this.fpsScope.fps;\r\n  }\r\n}\r\n\r\n\r\nAtomic.Body = Body;\r\nAtomic.Vertex = Vertex;\r\nAtomic.Constraint = Constraint;\r\n\r\n/**\r\n * shows current framerate \r\n * @method Atomic.showFps()\r\n * @param {object} option \r\n */\r\nAtomic.prototype.fpsScope = {\r\n  fps: null,\r\n  bar_vx: 0,\r\n  lastframe: null,\r\n  fpsBars: []\r\n};\r\n\r\nmodule.exports = Atomic;","const Vector = require('./Vector');\r\nconst Constraint = require('./Constraint');\r\nconst Vertex = require('./Vertex');\r\n\r\n/**\r\n * @class Body\r\n * @constructor Body\r\n * @param {object} opt\r\n */\r\nclass Body {\r\n  constructor(opt, engine) {\r\n    this.vCount = 0;\r\n    this.eCount = 0;\r\n    this.min = 0;\r\n    this.max = 0;\r\n    this.vertices = [];\r\n    this.positions = [];\r\n    this.edges = [];\r\n    this.bound = {};\r\n    this.center = new Vector(0, 0);\r\n    this.halfEx = new Vector(0, 0);\r\n    this.engine = engine;\r\n    this.render = opt.render || { fillStyle: 'black' };\r\n    this.mass = (opt.mass == undefined) ? 1 : opt.mass;\r\n    this.static = (opt.static || false);\r\n    this.angle = opt.angle || 0;\r\n    if (this.static) {\r\n      this.mass = Number.MAX_SAFE_INTEGER;\r\n    }\r\n    // SVG POLYGON\r\n    // loop through opt.vertices and add them to array\r\n    if (typeof opt.vertices === 'string') {\r\n      let arr = opt.vertices.split(' ');\r\n      let svgVertices = {};\r\n      for (let i = 0; i < arr.length; i++) {\r\n        svgVertices[i] = { x: Number(arr[i].split(',')[0]), y: Number(arr[i].split(',')[1]) };\r\n      }\r\n      // opt.svgVertices = arr;\r\n      opt.vertices = svgVertices;\r\n    }\r\n    // VERTICES\r\n    for (let n in opt.vertices) {\r\n      let vertex = new Vertex(this, opt.vertices[n], this.static, {\r\n        friction: this.engine.friction,\r\n        engine: this.engine,\r\n        canvas: this.engine.canvas,\r\n        groundFriction: this.engine.groundFriction\r\n      });\r\n      opt.vertices[n].compiled = vertex;\r\n      this.vertices.push(vertex);\r\n      this.positions.push(vertex.position);\r\n      this.engine.vertices.push(vertex);\r\n      this.vCount++;\r\n    }\r\n    // CONSTRAINTS\r\n    // loop through opt.constraints and add them to array\r\n    for (let i = 0; i < opt.constraints.length; i++) {\r\n      let cons = opt.constraints[i];\r\n      let constraint = new Constraint(this, //parent\r\n        opt.vertices[cons[0]].compiled, // v0\r\n        opt.vertices[cons[1]].compiled, // v1\r\n        (cons[2] || false));\r\n      if (constraint.edge) {\r\n        this.edges.push(constraint);\r\n        this.eCount++;\r\n      }\r\n      this.engine.constraints.push(constraint);\r\n    }\r\n    if (this.angle !== 0) {\r\n      // this.vertices.push(vertex);\r\n      // this.positions.push(vertex.position);\r\n      // this.engine.vertices.push(vertex);\r\n      // this.vCount++;\r\n      for (let i = 0; i < this.vertices.length; i++) {\r\n        let angle = this.angle / 180 * Math.PI;\r\n        this.calculateCenter();\r\n        this.vertices[i].position.x = (this.vertices[i].position.x * Math.cos(angle)) - (this.vertices[i].position.y * Math.sin(angle));\r\n        this.vertices[i].position.y = (this.vertices[i].position.x * Math.sin(angle)) + (this.vertices[i].position.y * Math.cos(angle));\r\n        this.vertices[i].oldPosition.x = this.vertices[i].position.x;\r\n        this.vertices[i].oldPosition.y = this.vertices[i].position.y;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @method Body.calculateCenter()\r\n   * calculateCenter and bounding box\r\n   */\r\n  calculateCenter() {\r\n    let minX = Number.MAX_SAFE_INTEGER, minY = Number.MAX_SAFE_INTEGER, maxX = -Number.MAX_SAFE_INTEGER, maxY = -Number.MAX_SAFE_INTEGER;\r\n    for (let i = 0; i < this.vertices.length; i++) {\r\n      let p = this.positions[i];\r\n      if (p.x > maxX)\r\n        maxX = p.x;\r\n      if (p.y > maxY)\r\n        maxY = p.y;\r\n      if (p.x < minX)\r\n        minX = p.x;\r\n      if (p.y < minY)\r\n        minY = p.y;\r\n    }\r\n    // center\r\n    this.center.set((minX + maxX) * 0.5, (minY + maxY) * 0.5);\r\n    // half extents\r\n    this.halfEx.set((maxX - minX) * 0.5, (maxY - minY) * 0.5);\r\n    this.bound = { minX, minY, maxX, maxY };\r\n  }\r\n  /**\r\n   * get the vector projection on to normal (n)\r\n   * @method Body.Project()\r\n   * @param {vector} n\r\n   */\r\n  project(n) {\r\n    function dot(a, b) {\r\n      return a.x * b.x + a.y * b.y;\r\n    }\r\n    // setup a starting value\r\n    let proj = dot(this.vertices[0].position, n);\r\n    let min = proj;\r\n    let max = proj;\r\n    for (let i = 0; i < this.vertices.length; i++) {\r\n      let p = this.vertices[i].position;\r\n      //project onto each axis\r\n      proj = dot(p, n);\r\n      if (proj < min) {\r\n        min = proj;\r\n      }\r\n      if (proj > max) {\r\n        max = proj;\r\n      }\r\n    }\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n  /**\r\n   * draw body\r\n   * @method Body.draw()\r\n   * @param {*} ctx\r\n   */\r\n  draw() {\r\n    this.engine.ctx.beginPath();\r\n    let p = this.edges[0].p0;\r\n    for (let i in this.render) {\r\n      if (this.render.hasOwnProperty(i)) {\r\n        this.engine.ctx[i] = this.render[i];\r\n      }\r\n    }\r\n    this.engine.ctx.fillStyle = this.render.fillStyle;\r\n    this.engine.ctx.moveTo(p.x, p.y);\r\n    for (let i = 1; i < this.edges.length; i++) {\r\n      p = this.edges[i].p0;\r\n      this.engine.ctx.lineTo(p.x, p.y);\r\n    }\r\n    if (this.render.strokeStyle) {\r\n      this.engine.ctx.stroke();\r\n    }\r\n    ;\r\n    this.engine.ctx.fill();\r\n    this.engine.ctx.closePath();\r\n  }\r\n  /**\r\n   * @method Body.drag()\r\n   */\r\n  drag() {\r\n    // drag\r\n    if (this.engine.pointer.isDown && !this.engine.dragVertex) {\r\n      if (this.engine.ctx.isPointInPath(this.engine.pointer.x, this.engine.pointer.y)) {\r\n        let minDistance = 99999;\r\n        for (let i = 0; i < this.engine.vertices.length; i++) {\r\n          let dist = this.engine.vertices[i].position.squareDist(this.engine.pointer);\r\n          if (dist < minDistance) {\r\n            this.engine.dragVertex = this.engine.vertices[i];\r\n            minDistance = dist;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (this.engine.pointer.isDown === false) {\r\n      this.engine.dragVertex = null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = Body;","const Vector = require('./Vector');\r\n\r\n/**\r\n * @class Collision\r\n * Collision Detection Class\r\n */\r\nclass Collision {\r\n  constructor() {\r\n    this.testAxis = new Vector(0, 0);\r\n    this.response = new Vector(0, 0);\r\n    this.relTanVel = new Vector(0, 0);\r\n    this.tangent = new Vector(0, 0);\r\n    this.relVel = new Vector(0, 0);\r\n    this.center = new Vector(0, 0);\r\n    this.axis = new Vector(0, 0);\r\n    this.line = new Vector(0, 0);\r\n    this.depth = 0;\r\n    this.edge = null;\r\n    this.vertex = null;\r\n  }\r\n  /**\r\n   * SAT Collision Detection\r\n   * @method Collision.SAT\r\n   * @param {Body} B0\r\n   * @param {Body} B1\r\n   */\r\n  SAT(B0, B1) {\r\n    // no aabb overlap performance optimization\r\n    this.checkAABB(B1, B0);\r\n    let minDistance = Number.MAX_SAFE_INTEGER;\r\n    const n0 = B0.edges.length;\r\n    const n1 = B1.edges.length;\r\n    // Iterate through all of the edges of both bodies\r\n    for (let i = 0, n = n0 + n1; i < n; i++) {\r\n      // get edge\r\n      let edge = i < n0 ? B0.edges[i] : B1.edges[i - n0];\r\n      // Calculate the perpendicular to this edge and normalize it\r\n      this.testAxis.normal(edge.p0, edge.p1);\r\n      // Project both bodies onto the normal\r\n      B0.project(this.testAxis);\r\n      B1.project(this.testAxis);\r\n      //Calculate the distance between the two intervals\r\n      const dist = B0.min < B1.min ? B1.min - B0.max : B0.min - B1.max;\r\n      // If the intervals don't overlap, return, since there is no collision\r\n      if (dist > 0) {\r\n        return false;\r\n      }\r\n      else if (Math.abs(dist) < minDistance) {\r\n        // Save collision information\r\n        minDistance = Math.abs(dist);\r\n        this.axis.copy(this.testAxis);\r\n        this.edge = edge;\r\n      }\r\n    }\r\n    // save penetration depth\r\n    this.depth = minDistance;\r\n    // Ensure collision edge in B1 and collision vertex in B0\r\n    // console.log(this.edge.parent)\r\n    if (this.edge.parent != B1) {\r\n      const t = B1;\r\n      B1 = B0;\r\n      B0 = t;\r\n    }\r\n    // Make sure that the collision normal is pointing at B1\r\n    // let n = this.center.sub2(B0.center, B1.center).dot(this.axis);\r\n    const xx = B0.center.x - B1.center.x;\r\n    const yy = B0.center.y - B1.center.y;\r\n    const n = this.axis.x * xx + this.axis.y * yy;\r\n    // Revert the collision normal if it points away from B1\r\n    if (n < 0) {\r\n      this.axis.negative();\r\n    }\r\n    let smallestDist = Number.MAX_SAFE_INTEGER, v, dist;\r\n    for (let i = 0; i < B0.vCount; i++) {\r\n      // Measure the distance of the vertex from the line using the line equation\r\n      v = B0.vertices[i];\r\n      this.line.sub2(v.position, B1.center);\r\n      dist = this.axis.dot(this.line);\r\n      // Set the smallest distance and the collision vertex\r\n      if (dist < smallestDist) {\r\n        smallestDist = dist;\r\n        this.vertex = v;\r\n      }\r\n    }\r\n    // There is no separating axis. Report a collision!\r\n    return true;\r\n  }\r\n  checkAABB(B1, B0) {\r\n    if (!(0 > Math.abs(B1.center.x - B0.center.x) - (B1.halfEx.x + B0.halfEx.x) &&\r\n      0 > Math.abs(B1.center.y - B0.center.y) - (B1.halfEx.y + B0.halfEx.y))) {\r\n      return false;\r\n    }\r\n  }\r\n  /**\r\n   * Resolve Collision based on SAT Given Collision Information\r\n   * @method Collision.resolve()\r\n   * @param {float} friction\r\n   */\r\n  resolve(friction) {\r\n    // cache vertices positions\r\n    let p0 = this.edge.p0, p1 = this.edge.p1, o0 = this.edge.v0.oldPosition, o1 = this.edge.v1.oldPosition, vp = this.vertex.position, vo = this.vertex.oldPosition, rs = this.response;\r\n    this.response.scale(this.axis, this.depth);\r\n    // calculate where on the edge the collision vertex lies\r\n    let t = Math.abs(p0.x - p1.x) > Math.abs(p0.y - p1.y)\r\n      ? (vp.x - rs.x - p0.x) / (p1.x - p0.x)\r\n      : (vp.y - rs.y - p0.y) / (p1.y - p0.y);\r\n    // lambda math\r\n    let lambda = 1 / (t * t + (1 - t) * (1 - t));\r\n    // calculate mass\r\n    let m0 = this.vertex.parent.mass, m1 = this.edge.parent.mass, tm = m0 + m1;\r\n    m0 = m0 / tm;\r\n    m1 = m1 / tm;\r\n    // apply the collision response\r\n    p0.x -= rs.x * (1 - t) * lambda * m0;\r\n    p0.y -= rs.y * (1 - t) * lambda * m0;\r\n    p1.x -= rs.x * t * lambda * m0;\r\n    p1.y -= rs.y * t * lambda * m0;\r\n    vp.x += rs.x * m1;\r\n    vp.y += rs.y * m1;\r\n    //\r\n    // collision friction\r\n    //\r\n    // compute relative velocity\r\n    this.relVel.set(vp.x - vo.x - (p0.x + p1.x - o0.x - o1.x) * 0.5, vp.y - vo.y - (p0.y + p1.y - o0.y - o1.y) * 0.5);\r\n    // axis perpendicular\r\n    this.tangent.perp(this.axis);\r\n    // // project the relative velocity onto tangent\r\n    let relTv = this.relVel.dot(this.tangent);\r\n    let rt = this.relTanVel.set(this.tangent.x * relTv, this.tangent.y * relTv);\r\n    // // apply tangent friction\r\n    let groundf = 0.95;\r\n    vo.x += rt.x * groundf * m1;\r\n    vo.y += rt.y * groundf * m1;\r\n    o0.x -= rt.x * (1 - t) * groundf * lambda * m0;\r\n    o0.y -= rt.y * (1 - t) * groundf * lambda * m0;\r\n    o1.x -= rt.x * t * groundf * lambda * m0;\r\n    o1.y -= rt.y * t * groundf * lambda * m0;\r\n  }\r\n  aabb(B0, B1) {\r\n    return (B0.bound.minX <= B1.bound.maxX) &&\r\n      (B0.bound.minY <= B1.bound.maxY) &&\r\n      (B0.bound.maxX >= B1.bound.minX) &&\r\n      (B1.bound.maxY >= B0.bound.minY);\r\n  }\r\n}\r\n\r\nmodule.exports = Collision;\r\n","/**\r\n * @class Constraint\r\n * @param {*} parent\r\n * @param {*} v0\r\n * @param {*} v1\r\n * @param {*} edge\r\n */\r\nclass Constraint {\r\n  constructor(parent, v0, v1, edge) {\r\n    this.parent = parent;\r\n    this.v0 = v0;\r\n    this.v1 = v1;\r\n    this.p0 = v0.position;\r\n    this.p1 = v1.position;\r\n    this.edge = edge;\r\n    this.dist = Math.sqrt(this.p0.squareDist(this.p1));\r\n  }\r\n  /**\r\n   * @method Constraint.solve()\r\n   * Solve Constrints\r\n   */\r\n  solve() {\r\n    let dx = this.p1.x - this.p0.x;\r\n    let dy = this.p1.y - this.p0.y;\r\n    let d = Math.sqrt(dx * dx + dy * dy);\r\n    // using square root approximation\r\n    // let delta = this.dist / (dx * dx + dy * dy + this.dist) - 0.5;\r\n    // dx *= delta;\r\n    // dy *= delta;\r\n    // // console.log(this.v0)\r\n    // if (!this.v0.pinned) {\r\n    //   this.p0.x -= dx;\r\n    //   this.p0.y -= dy;\r\n    // }\r\n    // if (!this.v1.pinned) {\r\n    //   this.p1.x += dx;\r\n    //   this.p1.y += dy;\r\n    // }\r\n    const diffrence = (d - this.dist) / d;\r\n    const adjustX = (dx * 0.5 * diffrence) /*stfns*/;\r\n    const adjustY = (dy * 0.5 * diffrence) /*stfns*/;\r\n    this.p0.x += adjustX;\r\n    this.p0.y += adjustY;\r\n    this.p1.x -= adjustX;\r\n    this.p1.y -= adjustY;\r\n  }\r\n}\r\n;\r\n\r\n\r\n\r\nmodule.exports = Constraint;","module.exports = {\r\n  self: null,\r\n  create: function (slf) {\r\n    this.self = slf;\r\n    return this;\r\n  },\r\n  /**\r\n   * @method Atomic.Render.dots()\r\n   * @param {number} radius\r\n   * @param {string} color\r\n   */\r\n  dots: function (radius, color) {\r\n    let PI2 = Math.PI * 2;\r\n    let rad = radius || 4;\r\n    for (let i = 0, j = this.self.vertices.length; i < j; i++) {\r\n      let p = this.self.vertices[i].position;\r\n      if (!p.hidden) {\r\n        let fill = (p.color || color || 'black');\r\n        this.self.ctx.beginPath();\r\n        this.self.ctx.fillStyle = fill;\r\n        this.self.ctx.arc(p.x, p.y, rad, 0, PI2);\r\n        this.self.ctx.fill();\r\n        this.self.ctx.closePath();\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.pointIndex()\r\n   * @param {string} font\r\n   * @param {stirng} color\r\n   */\r\n  pointIndex: function (font, color) {\r\n    this.self.ctx.font = font || '10px Arial';\r\n    this.self.ctx.fillStyle = color || 'black';\r\n    for (let i = 0; i < this.self.vertices.length; i++) {\r\n      let p = this.self.vertices[i].position;\r\n      this.self.ctx.fillText(i, (p.x - 5), (p.y - 5));\r\n    }\r\n    this.self.ctx.fill();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.lines()\r\n   * @param {number} linewidth\r\n   * @param {string} color\r\n   * @param {boolean} showHidden\r\n   */\r\n  lines: function (linewidth, color, showHidden) {\r\n    if (!showHidden) { showHidden = false; }\r\n    if (this.self.constraints.length > 0) {\r\n      this.self.ctx.beginPath();\r\n      this.self.ctx.strokeStyle = (color || 'black');\r\n      this.self.ctx.lineWidth = linewidth || 1;\r\n      for (let i = 0; i < this.self.constraints.length; i++) {\r\n        let c = this.self.constraints[i];\r\n        if (!c.hidden) {\r\n          this.self.ctx.moveTo(c.p0.x, c.p0.y);\r\n          this.self.ctx.lineTo(c.p1.x, c.p1.y);\r\n        }\r\n        if (showHidden === true) {\r\n          if (c.hidden) {\r\n            this.self.ctx.moveTo(c.p0.x, c.p0.y);\r\n            this.self.ctx.lineTo(c.p1.x, c.p1.y);\r\n          }\r\n        }\r\n      }\r\n      this.self.ctx.stroke();\r\n      this.self.ctx.closePath();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.indexOfBodies()\r\n   * @param {string} font\r\n   * @param {string} color\r\n   */\r\n  indexOfBodies: function (font, color) {\r\n    this.self.ctx.save();\r\n    this.self.ctx.font = font || '10px Arial';\r\n    this.self.ctx.fillStyle = color || 'black';\r\n    for (let i = 0; i < this.self.bodies.length; i++) {\r\n      let p = this.self.bodies[i];\r\n      for (let j = 0; j < p.vertices.length; j++) {\r\n        let v = p.vertices[j].position;\r\n        this.self.ctx.fillText(i + '.' + j, (v.x - 10), (v.y - 10));\r\n      }\r\n    }\r\n    this.self.ctx.fill();\r\n    this.self.ctx.restore();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.renderCenterOfMass()\r\n   * @param {string} color\r\n   */\r\n  centerOfMass: function (color) {\r\n    this.self.ctx.fillStyle = color || 'black';\r\n    this.self.ctx.beginPath();\r\n    for (let i = 0; i < this.self.bodies.length; i++) {\r\n      let b = this.self.bodies[i];\r\n      this.self.ctx.fillRect(b.center.x - 2.5, b.center.y - 2.5, 5, 5);\r\n    }\r\n    this.self.ctx.fill();\r\n    this.self.ctx.closePath();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.boundingBox()\r\n   * @param {string} color\r\n   */\r\n  boundingBox: function (color) {\r\n    this.self.ctx.fillStyle = color || 'rgba(0,0,0,0.2)';\r\n    this.self.ctx.beginPath();\r\n    for (let i = 0; i < this.self.bodies.length; i++) {\r\n      let b = this.self.bodies[i];\r\n      this.self.ctx.fillRect(b.center.x - b.halfEx.x, b.center.y - b.halfEx.y,\r\n        b.halfEx.x + b.halfEx.x, b.halfEx.y + b.halfEx.y);\r\n    }\r\n    this.self.ctx.fill();\r\n    this.self.ctx.closePath();\r\n  },\r\n\r\n  /**\r\n   * @method Atomic.Render.information()\r\n   */\r\n  information: function () {\r\n    let stat = 'Objects : ' + this.self.bodies.length;\r\n    let stat2 = 'Vertices : ' + this.self.vertices.length;\r\n    let stat3 = 'Constraints : ' + this.self.constraints.length;\r\n    this.self.ctx.fillStyle = 'black';\r\n    this.self.ctx.font = '14px Arial'\r\n    this.self.ctx.fillText(stat, 10, 20);\r\n    this.self.ctx.fillText(stat2, 10, 40);\r\n    this.self.ctx.fillText(stat3, 10, 60);\r\n  }\r\n}","/**\r\n * Vector.js v1.0.0\r\n * @author Anurag Hazra\r\n * @borrows p5.Vector\r\n * @param {number} x \r\n * @param {number} y \r\n */\r\nfunction Vector(x, y) {\r\n  this.x = x || 0;\r\n  this.y = y || 0;\r\n}\r\n\r\n// Static Functions\r\nVector.dist = function (v1, v2) {\r\n  return v1.dist(v2);\r\n}\r\nVector.sub = function (v1, v2) {\r\n  return new Vector(v1.x - v2.x, v1.y - v2.y);\r\n};\r\nVector.add = function (v1, v2) {\r\n  return new Vector(v1.x + v2.x, v1.y + v2.y);\r\n};\r\nVector.fromAngle = function (angle) {\r\n  let v = new Vector(0, 0);\r\n  v.x = Math.cos(angle);\r\n  v.y = Math.sin(angle);\r\n  return v;\r\n}\r\nVector.random2D = function (v) {\r\n  return Vector.fromAngle(Math.random() * Math.PI * 180);\r\n}\r\n\r\nVector.prototype = {\r\n  set: function(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  },\r\n  add: function (x, y) {\r\n    if (arguments.length === 1) {\r\n      this.x += x.x;\r\n      this.y += x.y;\r\n    } else if (arguments.length === 2) {\r\n      this.x += x;\r\n      this.y += y;\r\n    }\r\n    return this;\r\n  },\r\n  sub: function (x, y) {\r\n    if (x instanceof Vector) {\r\n      this.x -= x.x;\r\n      this.y -= x.y;\r\n    } else {\r\n      this.x -= x;\r\n      this.y -= y;\r\n    }\r\n    return this;\r\n  },\r\n  sub2 : function(v0, v1) {\r\n    this.x = v0.x - v1.x;\r\n    this.y = v0.y - v1.y;\r\n    return this;\r\n  },\r\n  mult: function (v) {\r\n    if (typeof v === 'number') {\r\n      this.x *= v;\r\n      this.y *= v;\r\n    } else {\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n    }\r\n    return this;\r\n  },\r\n  div: function (v) {\r\n    if (typeof v === 'number') {\r\n      this.x /= v;\r\n      this.y /= v;\r\n    } else {\r\n      this.x /= v.x;\r\n      this.y /= v.y;\r\n    }\r\n    return this;\r\n  },\r\n  mag: function () {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  },\r\n  magSq: function () {\r\n    return (this.x * this.x + this.y * this.y);\r\n  },\r\n  setMag: function (value) {\r\n    this.normalize();\r\n    this.mult(value);\r\n    return this;\r\n  },\r\n  normalize: function () {\r\n    let m = this.mag();\r\n    if (m > 0) {\r\n      this.div(m);\r\n    }\r\n    return this;\r\n  },\r\n  limit: function (max) {\r\n    if (this.mag() > max) {\r\n      this.normalize();\r\n      this.mult(max);\r\n    }\r\n    return this;\r\n  },\r\n  heading: function () {\r\n    return (-Math.atan2(-this.y, this.x));\r\n  },\r\n  dist: function (v) {\r\n    let dx = this.x - v.x;\r\n    let dy = this.y - v.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n  copy: function () {\r\n    return new Vector(this.x, this.y);\r\n  },\r\n  negative: function () {\r\n    this.x = -this.x;\r\n    this.y = -this.y;\r\n    return this;\r\n  },\r\n  array: function () {\r\n    return [this.x, this.y];\r\n  },\r\n  toString: function () {\r\n    return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \"]\";\r\n  },\r\n  unit: function() {\r\n    return this.div(this.mag());\r\n  },\r\n  subtract: function(v) {\r\n    return new Vector(this.x - v, this.y - v);\r\n  },\r\n  dot: function(v) {\r\n    return this.x * v.x + this.y * v.y;\r\n  },\r\n  scale: function(v, s) {\r\n    this.x = v.x * s;\r\n    this.y = v.y * s;\r\n    return this;\r\n  },\r\n  normal: function(v0, v1) {\r\n    // perpendicular\r\n    var nx = v0.y - v1.y,\r\n      ny = v1.x - v0.x;\r\n    // normalize\r\n    var len = 1.0 / Math.sqrt(nx * nx + ny * ny);\r\n    this.x = nx * len;\r\n    this.y = ny * len;\r\n    return this;\r\n  },\r\n  copy: function(v) {\r\n    this.x = v.x;\r\n    this.y = v.y;\r\n    return this;\r\n  },\r\n  squareDist: function(v) {\r\n    var dx = this.x - v.x;\r\n    var dy = this.y - v.y;\r\n    return (dx * dx + dy * dy);\r\n  },\r\n  perp: function(v) {\r\n    this.x = -v.y;\r\n    this.y = v.x;\r\n    return this;\r\n  },\r\n}\r\n\r\nmodule.exports = Vector;","const Vector = require('./Vector');\r\n\r\n/**\r\n * @class Vertex\r\n * @param {*} parent\r\n * @param {*} vertex\r\n * @param {*} pinned\r\n */\r\nclass Vertex {\r\n  constructor(parent, vertex, pinned, opt) {\r\n    console.log(opt)\r\n    this.opt = opt;\r\n    this.parent = parent;\r\n    this.position = new Vector(vertex.x, vertex.y);\r\n    this.oldPosition = new Vector(vertex.x, vertex.y);\r\n    this.pinned = pinned;\r\n  }\r\n  /**\r\n   * @method Vertex.integrate()\r\n   * Loop and update physics\r\n   */\r\n  integrate() {\r\n    if (!this.pinned) {\r\n      let pos = this.position;\r\n      let oldpos = this.oldPosition;\r\n      let x = pos.x;\r\n      let y = pos.y;\r\n      pos.x += (pos.x - oldpos.x) * this.opt.friction;\r\n      pos.y += (pos.y - oldpos.y) * this.opt.friction + this.opt.engine.gravity;\r\n      oldpos.set(x, y);\r\n    }\r\n  }\r\n  /**\r\n   * @method Vertex.boundary()\r\n   * Handle Boundry Collision\r\n   */\r\n  boundary() {\r\n    let pos = this.position, old = this.oldPosition;\r\n    let vx = (pos.x - old.x);\r\n    let vy = (pos.y - old.y);\r\n    // Y\r\n    if (pos.y < 0) {\r\n      pos.y = 0;\r\n    }\r\n    else if (pos.y > this.opt.canvas.height) {\r\n      pos.x -= (pos.y - this.opt.canvas.height) * vx * this.opt.groundFriction;\r\n      pos.y = this.opt.canvas.height;\r\n    }\r\n    // X\r\n    if (pos.x < 0) {\r\n      pos.x = 0;\r\n    }\r\n    else if (pos.x > this.opt.canvas.width) {\r\n      pos.x = this.opt.canvas.width;\r\n    }\r\n    ;\r\n  }\r\n}\r\n;\r\n\r\n\r\n\r\nmodule.exports = Vertex;\r\n","module.exports = require('./Atomic');\r\n"],"sourceRoot":""}